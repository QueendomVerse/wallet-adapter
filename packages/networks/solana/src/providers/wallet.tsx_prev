/*
 * This is a refactored version of the Blockworks Foundation Mango wallet.
 * For ChiefMetaverseOfficer's use case we needed to remove the clearing of the wallet after disconnect and errors.
 * Original: https://github.com/blockworks-foundation/mango-ui-v3/blob/948ec28c91a83e2c0fe5ed218223661be077201c/components/WalletAdapter/WalletProvider.tsx
 */

//@TODO: This commit's got a lot of goodies; review and apply
// https://github.com/blockworks-foundation/mango-ui-v3/pull/203/files#diff-b6ab9734a066a3d49e523c368e5dabcc6b017999c1f9cffd558a2093b6aa1398R51

import type { FC, ReactNode } from 'react';
import React, { createContext, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';
// import { SubEvent } from 'sub-events';
import { Button, Collapse, Modal } from 'antd';

// import { PhantomWalletAdapter } from '@mindblox/wallet-adapter-wallets';

// import { PhantomWalletAdapter } from '@mindblox-wallet-adapter/phantom';


import { Adapter, Chain, ChainNetworks, intArrayToString, SendTransactionOptions, SolanaPublicKey, Wallet, WalletName,
    WalletError,
    WalletReadyState,
    WalletDisconnectionError,
    WalletAdapterNotMountedError,
    // WalletNotActivatedError,
    WalletNotConnectedError,
    WalletNotReadyError,
    WalletPublicKeyError,
    WalletNotSelectedError,
    ChainConnection,
    ChainPublicKey,
    ChainTransaction,
    ChainTransactionSignature,
    ChainSendOptions,
    ChainSigner,
} from '@mindblox-wallet-adapter/base';

import { notify, useLocalStorageState } from '@mindblox-wallet-adapter/react';
// import { SolanaConnection, SolanaSendOptions, SolanaSigner, SolanaTransaction, SolanaTransactionSignature } from '@mindblox-wallet-adapter/base';


import { useWallet, WalletContext } from '../hooks/useWallet';


const { Panel } = Collapse;

const ModalComponent: FC<ModalProps> = ({ modalContent, modalFooter, visible, onCancel, closable, centered }) => {
    return (
        <Modal centered={centered} visible={visible} onCancel={onCancel} closable={closable}>
            {modalContent}
            {modalFooter}
        </Modal>
    );
};

export interface ModalProps {
    modalContent?: ReactNode;
    modalFooter?: ReactNode;
    visible: boolean;
    onCancel: () => void;
    closable?: boolean;
    centered?: boolean;
    walletName?: WalletName;
}

interface WalletProviderProps {
    children: ReactNode;
    wallets: (
        | Adapter<
            // SolanaPublicKey,
            // SolanaTransaction,
            // SolanaConnection,
            // SolanaTransactionSignature
            ChainPublicKey,
            ChainTransaction,
            ChainConnection,
            ChainTransactionSignature
        >
        // | PhantomWalletAdapter
    )[];
    autoConnect?: boolean;
    onError?: (error: WalletError) => void;
    localStorageKey?: string;
}

export interface WalletModalContextState {
    visible: boolean;
    setVisible: (open: boolean) => void;
}

export const WalletModalContext = createContext<WalletModalContextState>({} as WalletModalContextState);

export const useWalletModal = (): WalletModalContextState => {
    return useContext(WalletModalContext);
};

const initialState: {
    chain: Chain | null;
    wallet: Wallet<
        // SolanaPublicKey,
        // SolanaTransaction,
        // SolanaConnection,
        // SolanaTransactionSignature
        ChainPublicKey,
        ChainTransaction,
        ChainConnection,
        ChainTransactionSignature
    > | null;
    adapter:
    | Adapter<
        // SolanaPublicKey,
        // SolanaTransaction,
        // SolanaConnection,
        // SolanaTransactionSignature
        ChainPublicKey,
        ChainTransaction,
        ChainConnection,
        ChainTransactionSignature
    > 
    // | PhantomWalletAdapter
    | null;
    // publicKey: SolanaPublicKey | null;
    publicKey: ChainPublicKey | null;
    connected: boolean;
} = {
    chain: ChainNetworks.SOL,
    wallet: null,
    adapter: null,
    publicKey: null,
    connected: false,
};

export const WalletModal: FC = () => {
    const {
        wallets,
        // wallet: selected,
        select,
    } = useWallet();
    const { visible, setVisible } = useWalletModal();
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const [showWallets, setShowWallets] = useState(false);
    const close = useCallback(() => {
        setVisible(false);
        setShowWallets(false);
    }, [setVisible, setShowWallets]);

    // const phatomWalletAdapter = useMemo(() => new PhantomWalletAdapter(), []);

    const handleSelection = async (wallet: Wallet<
        // SolanaPublicKey,
        // SolanaTransaction,
        // SolanaConnection,
        // SolanaTransactionSignature
        ChainPublicKey,
        ChainTransaction,
        ChainConnection,
        ChainTransactionSignature
    >) => {
        const name = wallet?.adapter?.name;
        console.info(`Selected wallet: '${name}'`);
        name && await select(name);
        close();
    };

    return (
        <ModalComponent
            centered={true}
            visible={visible}
            onCancel={close}
            closable={false}
            modalContent={
                <>
                    <h4 className="mb-3">Please select a wallet to connect to.</h4>
                    {/* <Button
                        className="metaplex-button-jumbo d-flex wallet-modal-btn"
                        onClick={async () => {
                            console.info(`Selecting phantomWallet name: ${phatomWalletAdapter.name}`);
                            await select(phatomWalletAdapter.name);
                            close();
                        }}
                    >
                        <img src={phatomWalletAdapter?.icon} style={{ width: '1.2rem' }} />
                        &nbsp;Connect to Phantom
                    </Button> */}
                    <Collapse
                        ghost
                        expandIcon={(panelProps) =>
                            panelProps.isActive ? (
                                <svg
                                    width="20"
                                    height="20"
                                    viewBox="0 0 20 20"
                                    fill="gray"
                                    xmlns="http://www.w3.org/2000/svg"
                                >
                                    <path
                                        d="M15 7.5L10 12.5L5 7.5"
                                        stroke="gray"
                                        strokeWidth="2"
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                    />
                                </svg>
                            ) : (
                                <svg
                                    width="20"
                                    height="20"
                                    viewBox="0 0 20 20"
                                    fill="gray"
                                    xmlns="http://www.w3.org/2000/svg"
                                >
                                    <path
                                        d="M7.5 5L12.5 10L7.5 15"
                                        stroke="gray"
                                        strokeWidth="2"
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                    />
                                </svg>
                            )
                        }
                    >
                        <Panel header={<strong className="ms-4">Other Wallet</strong>} key="1">
                            {wallets.map((wallet, idx) => {
                                // if (wallet.adapter === phatomWalletAdapter) return null;

                                return (
                                    <Button
                                        key={idx}
                                        className="metaplex-button wallet-modal-btn"
                                        style={{
                                            marginBottom: 5,
                                        }}
                                        onClick={async () => await handleSelection(wallet)}
                                    >
                                        Connect to {wallet.adapter?.name}
                                    </Button>
                                );
                            })}
                        </Panel>
                    </Collapse>
                </>
            }
        />
    );
};

export const WalletModalProvider: FC<{ children: ReactNode }> = ({ children }) => {
    // const { wallet, connected, disconnect, publicKey } = useWallet();
    const { wallet, publicKey, disconnect } = useWallet();

    const [isWalletConnected, setIsWalletConnected] = useState(!!publicKey);
    const [connected, setConnected] = useState(!!publicKey);
    const [visible, setVisible] = useState(false);

    useEffect(() => {
        if (!wallet || wallet?.adapter?.name.includes('WebWallet')) {
            console.debug('Excluding Web Wallets ...');
            return;
        }
        if (publicKey) {
            const base58 = publicKey.toBase58();
            const keyToDisplay =
                base58.length > 20
                    ? `${base58.substring(0, 7)}.....${base58.substring(base58.length - 7, base58.length)}`
                    : base58;
            notify({
                message: `Connected: ${wallet.adapter?.name}`,
                description: <h5 className="fw-bold">{keyToDisplay}</h5>,
            });
        }
    }, [wallet, publicKey]);

    useEffect(() => {
        const init = async () => {
            if (!publicKey && connected) {
                try {
                    await disconnect();
                } catch (error) {
                    console.error('failed to disconnect', error);
                    notify({
                        message: `Disconnect`,
                        description: 'Failed',
                        type: 'error',
                    });
                }
                console.info(`Disconnected from ${wallet?.adapter?.name}`);
                if (wallet?.adapter?.name === 'SolanaPrimaryWebWallet') return;
                notify({
                    message: `Disconnected`,
                    description: '',
                });
            }
            setIsWalletConnected(!!publicKey);
        };
        init();
    }, [publicKey, connected, isWalletConnected]);

    useEffect(() => {
        if (!publicKey && connected) {
            console.info(`Disconnected from ${wallet?.adapter?.name}`);
            setConnected(false);
            // setIsWalletConnected(!!publicKey);

            if (wallet?.adapter?.name === 'SolanaPrimaryWebWallet') return;
            notify({
                message: `Disconnected`,
                description: '',
            });
        }
    }, [publicKey, connected, setConnected]);

    return (
        <WalletModalContext.Provider
            value={{
                visible,
                setVisible,
            }}
        >
            {children}
            <WalletModal />
        </WalletModalContext.Provider>
    );
};

export const WalletProvider: FC<WalletProviderProps> = ({
    children,
    wallets: adapters,
    autoConnect = false,
    onError,
    localStorageKey = 'walletName',
}) => {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const [localName, setLocalName] = useLocalStorageState(localStorageKey);

    const [{ chain, wallet, adapter, publicKey, connected }, setState] = useState(initialState);
    const readyState = adapter?.readyState || WalletReadyState.Unsupported;
    const [connecting, setConnecting] = useState(false);
    const [name, setName] = useState<WalletName | null>((localName ?? '') as WalletName);
    const [disconnecting, setDisconnecting] = useState(false);
    const isConnecting = useRef(false);
    const isDisconnecting = useRef(false);
    const isUnloading = useRef(false);

    // useMemo(() => {
    //     console.log(wallet, adapter, publicKey, connected);
    // }, [wallet, adapter, publicKey, connected]);

    // Wrap adapters to conform to the `Wallet` interface
    const [wallets, setWallets] = useState(() =>
        adapters
            ? adapters.map((adapter) => ({
                  adapter,
                  readyState: adapter.readyState,
              }))
            : []
    );

    // When the wallets change, start to listen for changes to their `readyState`
    useEffect(() => {
        if (!adapters || adapters.length < 1) return;

        const handleReadyStateChange = (adapter: Adapter<
            // SolanaPublicKey,
            // SolanaTransaction,
            // SolanaConnection,
            // SolanaTransactionSignature
            ChainPublicKey,
            ChainTransaction,
            ChainConnection,
            ChainTransactionSignature
            >) => (readyState: WalletReadyState) => {
            setWallets((prevWallets) => {
                const walletIndex = prevWallets.findIndex(
                    ({ adapter: currentAdapter }) => currentAdapter.name === adapter.name
                );
                if (walletIndex === -1) return prevWallets;

                return [
                    ...prevWallets.slice(0, walletIndex),
                    { ...prevWallets[walletIndex], readyState },
                    ...prevWallets.slice(walletIndex + 1),
                ];
            });
        };

        for (const adapter of adapters) {
            console.info('handleReadyStateChange');
            adapter.on('readyStateChange', handleReadyStateChange(adapter), adapter);
        }

        return () => {
            for (const adapter of adapters) {
                //@ts-ignore
                adapter.off('readyStateChange', handleReadyStateChange(adapter), adapter);
            }
        };
    }, [adapters]);

    // When the selected wallet changes, initialize the state
    useEffect(() => {
        if (!wallets || wallets.length < 1) {
            return;
        }
        if (!name) {
            return;
            // console.info("Wallet adapter name is not defined, defaulting to 'WebWallet'");
            // const wallet = wallets.find(({ adapter }) => adapter.name === 'WebWallet');
            // if (!wallet) {
            //   handleError(new WalletNotActivatedError('WebWallet is Not Activated!'));
            //   return;
            // }

            // setState({
            //   wallet,
            //   adapter: wallet.adapter,
            //   connected: wallet.adapter.connected,
            //   publicKey: wallet.adapter.publicKey,
            // });
            // return;
        }
        const wallet = wallets.find(({ adapter }: { adapter: Adapter<
            // SolanaPublicKey,
            // SolanaTransaction,
            // SolanaConnection,
            // SolanaTransactionSignature
            ChainPublicKey,
            ChainTransaction,
            ChainConnection,
            ChainTransactionSignature
            > }) => {
            console.debug(`${adapter.name}, ${name}`);
            return adapter.name === name;
        });
        if (wallet) {
            setState({
                chain,
                wallet,
                adapter: wallet.adapter,
                connected: wallet.adapter.connected,
                publicKey: wallet.adapter.publicKey,
            });
        } else {
            setState(initialState);
        }
    }, [name, wallets]);

    // If autoConnect is enabled, try to connect when the adapter changes and is ready
    useEffect(() => {
        if (
            isConnecting.current ||
            connecting ||
            connected ||
            !autoConnect ||
            !adapter ||
            !(readyState === WalletReadyState.Installed || readyState === WalletReadyState.Loadable)
        )
            return;

        if (!publicKey) return;
        (async () => {
            isConnecting.current = true;
            setConnecting(true);
            try {
                if (!adapter) {
                    throw new WalletNotSelectedError();
                }
            } catch (error: any) {
                // Clear the selected wallet
                setName(null);
                // Don't throw error, but handleError will still be called
            } finally {
                setConnecting(false);
                isConnecting.current = false;
            }
        })();
    }, [isConnecting, connecting, publicKey, connected, autoConnect, adapter, wallet, readyState]);

    // If the window is closing or reloading, ignore disconnect and error events from the adapter
    useEffect(() => {
        const listener = () => {
            isUnloading.current = true;
        };

        window.addEventListener('beforeunload', listener);
        return () => window.removeEventListener('beforeunload', listener);
    }, [isUnloading]);

    // Handle the adapter's select event
    //@TODO handle name only?
    const handleSelect = useCallback(() => {
        if (!adapter) {
            throw handleError(new WalletAdapterNotMountedError(`Wallet Adapter Not Mounted`));
        }
        setState((state) => ({
            ...state,
            // selected: adapter.selected,
            name: adapter.name,
        }));
    }, [adapter]);

    // Handle the adapter's connect event
    const handleConnect = useCallback(() => {
        if (!adapter) {
            throw handleError(new WalletAdapterNotMountedError(`Wallet Adapter Not Mounted`));
        }
        setState((state) => ({
            ...state,
            connected: adapter.connected,
            publicKey: adapter.publicKey,
        }));
    }, [adapter, wallet]);

    // Handle the adapter's disconnect event
    const handleDisconnect = useCallback(() => {
        if (!adapter) {
            handleError(new WalletAdapterNotMountedError(`Wallet Adapter Not Mounted`));
            return;
        }
        if (!isUnloading.current) setName(null);
        setState((state) => ({
            ...state,
            connected: false,
            publicKey: null,
        }));
    }, [adapter]);

    // Handle the adapter's error event, and local errors
    const handleError = useCallback(
        (error: WalletError) => {
            // Call onError unless the window is unloading
            if (!isUnloading.current) (onError || console.error)(error);
            notify({
                message: 'Wallet Error',
                description: error.message,
            });
            return error;
        },
        [isUnloading, onError]
    );

    // Setup and teardown event listeners when the adapter changes
    useEffect(() => {
        if (adapter) {
            adapter.on('connect', handleConnect);
            adapter.on('disconnect', handleDisconnect);
            adapter.on('error', handleError);
            return () => {
                adapter.off('connect', handleConnect);
                adapter.off('disconnect', handleDisconnect);
                adapter.off('error', handleError);
            };
        }
    }, [adapter, handleSelect, handleConnect, handleDisconnect, handleError]);

    // When the adapter changes, disconnect the old one
    useEffect(() => {
        if (!adapter) return;
        const init = async () => {
            try {
                return await adapter.disconnect();
            } catch (error) {
                throw handleError(new WalletDisconnectionError(`Failed to Disconnect Wallet(${name}) Adapter!`));
            }
        };
        init();
    }, [adapter]);

    const select = useCallback(
        async (name: WalletName) => {
            setName(name);
        },
        [adapter]
    );

    const setCredentials = useCallback(
        async (chain: Chain, label: string, privateKey: Uint8Array) => {
            if (!adapter) {
                handleError(new WalletAdapterNotMountedError(`Wallet(${name}) Adapter Not Mounted!`));
                return;
            }
        },
        [name, adapter]
    );

    // Connect the adapter to the wallet
    const connect = useCallback(
        async (chain?: Chain, label?: string, privateKey?: Uint8Array, force?: boolean, wltName?: WalletName) => {
            if (force && wltName && adapter && adapter.name.includes('WebWallet') && chain && label && privateKey) {
                setName(wltName);
                return await adapter.connect();
            }

            // if (!force && (isConnecting.current || connecting || disconnecting || connected)) {
            if (isConnecting.current || connecting || disconnecting || connected) {
                console.warn(`Wallet is currently connecting or is already connected`);
                return;
            }
            if (!adapter) {
                handleError(new WalletAdapterNotMountedError(`Wallet(${name}) Adapter Not Mounted!`));
                return;
            }

            // console.debug('Adapter?', !adapter.name.includes('WebWallet'),
            //   readyState === WalletReadyState.Installed,
            //   readyState === WalletReadyState.Loadable)

            if (
                !adapter.name.includes('WebWallet') &&
                !(readyState === WalletReadyState.Installed || readyState === WalletReadyState.Loadable)
            ) {
                if (typeof window !== 'undefined') {
                    window.open(adapter.url, '_blank');
                }
                handleError(new WalletNotReadyError(`Wallet(${adapter.name}) not ready!`));
                return;
            }
            // if (!publicKey) {
            //   handleError(new WalletPublicKeyError(
            //     `Wallet(${adapter.name}) does not have a public key!`
            //   ));
            //   return;
            // }

            isConnecting.current = true;
            setConnecting(true);
            try {
                privateKey && (await adapter.connect());
            } catch (error: any) {
                disconnect();
                setName(null);
            }
            setConnecting(false);
            isConnecting.current = false;
        },
        [isConnecting, connecting, disconnecting, connected, adapter, name, wallet, readyState, handleError]
    );

    // Disconnect the adapter from the wallet
    const disconnect = useCallback(async () => {
        console.debug('disconnecting ...');
        console.debug(isDisconnecting.current, disconnecting, adapter);
        if (isDisconnecting.current || disconnecting) return;
        // if (!adapter) {
        //   handleError(new WalletAdapterNotMountedError(`Wallet Adapter Not Mounted`));
        //   return;
        // }
        if (!adapter) return setName(null);

        isDisconnecting.current = true;
        setDisconnecting(true);
        try {
            await adapter.disconnect();
            setDisconnecting(false);
        } catch (error: any) {
            setName(null);
            // throw error;
            handleError(new WalletError(`Unknown Error: ${error}`));
        } finally {
            setDisconnecting(false);
            isDisconnecting.current = false;
        }
    }, [isDisconnecting, disconnecting, adapter, name]);

    // Send a transaction using the provided connection
    const sendTransaction = useCallback(
        // async (transaction: SolanaTransaction, connection: SolanaConnection, options?: SendTransactionOptions<SolanaSigner, SolanaSendOptions>) => {
        async (transaction: ChainTransaction, connection: ChainConnection, options?: SendTransactionOptions<ChainSigner, ChainSendOptions>) => {

            if (!adapter) {
                throw handleError(new WalletAdapterNotMountedError(`Wallet Adapter Not Mounted`));
            }
            if (!connected) {
                throw handleError(new WalletNotConnectedError(`Wallet(${adapter.name}) 1 not connected!`));
            }
            return await adapter.sendTransaction(transaction, connection, options);
        },
        [adapter, handleError, connected]
    );

    // Sign a transaction if the wallet supports it
    // const signTransaction = useMemo(async() => {
    //   if (!adapter) {
    //     throw handleError(new WalletAdapterNotMountedError(`Wallet Adapter Not Mounted`));
    //   }
    //   if (!connected) {
    //     throw handleError(new WalletNotConnectedError(`Wallet(${adapter.name}) 2 not connected!`));
    //   }
    //   if ( adapter && 'signTransaction' in adapter) {
    //     const sign = async (transaction: SolanaTransaction): Promise<SolanaTransaction> => {
    //       return await adapter.signTransaction(transaction);
    //     }
    //     await sign();
    //   }
    // }, [adapter, handleError, connected])
    const signTransaction = useMemo(
        () =>
            adapter && 'signTransaction' in adapter
                // ? async (transaction: SolanaTransaction): Promise<SolanaTransaction> => {
                    ? async (transaction: ChainTransaction): Promise<ChainTransaction> => {
                      if (!connected) {
                          throw handleError(new WalletNotConnectedError(`Wallet(${adapter.name}) 2 not connected!`));
                      }
                      return await adapter.signTransaction(transaction);
                  }
                : undefined,
        [adapter, handleError, connected]
    );

    // Sign multiple transactions if the wallet supports it
    const signAllTransactions = useMemo(
        () =>
            adapter && 'signAllTransactions' in adapter
                // ? async (transactions: SolanaTransaction[]): Promise<SolanaTransaction[]> => {
                    ? async (transactions: ChainTransaction[]): Promise<ChainTransaction[]> => {
                      if (!connected) {
                          throw handleError(new WalletNotConnectedError(`Wallet(${adapter.name}) 3 not connected!`));
                      }
                      return await adapter.signAllTransactions(transactions);
                  }
                : undefined,
        [adapter, handleError, connected]
    );

    // Sign an arbitrary message if the wallet supports it
    const signMessage = useMemo(
        () =>
            adapter && 'signMessage' in adapter
                ? async (message: Uint8Array): Promise<Uint8Array> => {
                      if (!connected) {
                          throw handleError(new WalletNotConnectedError(`Wallet(${adapter.name}) 4 not connected!`));
                      }
                      return await adapter.signMessage(message);
                  }
                : undefined,
        [adapter, handleError, connected]
    );

    return (
        <WalletContext.Provider
            value={{
                chain,
                autoConnect,
                wallets,
                wallet,
                publicKey,
                connected,
                connecting,
                disconnecting,
                setCredentials,
                select,
                connect,
                disconnect,
                sendTransaction,
                signTransaction,
                signAllTransactions,
                signMessage,
            }}
        >
            <WalletModalProvider>{children}</WalletModalProvider>
        </WalletContext.Provider>
    );
};
