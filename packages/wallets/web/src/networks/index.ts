export type {
    SendNear,
    NearAccount,
    NearKeypair,
    MintNft as MintNearNft, 
    WalletContextState as NearWalletContextState,
    ENDPOINT_NAME as NEAR_ENDPOINT_NAME,
    BrowserWalletAdapterConfig as NearBrowserWalletAdapterConfig,
    BrowserWalletAdapter as NearBrowserWalletAdapter,
    NftMetaData as NearNftMetaData,
    BrowserWalletConfig as NearBrowserWalletConfig,
    Gas as NearGas,
    Config as NearConfig,
    MintNft as NearMintNft,
} from './near';
export {
    generateNearKeys,
    walletName as nearWalletName,
    ENDPOINTS as NEAR_ENDPOINTS,
    WalletContext as NearWalletContext,
    ConnectionContext as NearConnectionContext,
    ConnectionProvider as NearConnectionProvider,
    getAccount as getNearAccount,
    getImplicitAccountId as getNearImplicitAccountId,
    getImplicitIdsFromName as getNearImplicitIdsFromName,
    getBalance as getNearBalance,
    getKeyPairFromPrivateKey as getNearKeyPairFromPrivateKey,
    getKeyPairFromSeedPhrase as getNearKeyPairFromSeedPhrase,
    getNativeKeyPairFromPrivateKey as getNearNativeKeyPairFromPrivateKey,
    getPublicKey as getNearPublicKey,
    mintNft as mintNearNft,
    sendFundsTransaction as sendNearFundsTransaction,
    useAccount as useNearAccount,
    useBrowserWallet as useNearBrowserWallet,
    useWebWallet as useNearWebWallet,
    BrowserWalletProvider as NearBrowserWalletProvider,
    getNetworkConfig as getNearNetworkConfig,
    isValidAccount as isValidNearAccount,
    isValidNearName as isValidNearName,
    getImplicitId as getNearImplicitId,
    isImplicitAddress as isNearImplicitAddress,
    KeyType as NearKeyType,
    PublicKey as NearPublicKey,
    removeEd25519,
    generateSeedPhrase as generateNearSeedPhrase,
    normalizeSeedPhrase as normalizeNearSeedPhrase,
    parseSeedPhrase as parseNearSeedPhrase,
    findSeedPhraseKey as findNearSeedPhraseKey,
    getSign as getNearSign,
    SCHEMA as NEAR_SCHEMA,
    BrowserWallet as NearBrowserWallet,
    toArray as toNearConfigArray,
    config as nearDefaultConfig,
} from './near';
export type {
    SendSolana,
    SolanaAccount,
    SolanaKeys,
    Attribute as SolanaAttribute,
    TokenAccount as SolanaTokenAccount,
    WalletContextState as SolanaWalletContextState,
    ENDPOINT_NAME as SOLANA_ENDPOINT_NAME,
    EndpointMap as SolanaEndpointMap,
    ConnectionConfig as SolanaConnectionConfig,
    NetworkProps as SolanaNetworkProps,
    ConnectProps as SolanaConnectProps,
    WalletSigner as SolanaWalletSigner,
    WalletModalContextState as SolanaWalletModalContextState,
    MetadataFile as SolanaMetadataFile,
    IMetadataExtension as SolanaIMetadataExtension,
    MetadataCreationParams as SolanaMetadataCreationParams,
} from './solana';
export type {
    SolanaConnection
} from '../hooks/useConnection';
export {
    TEN,
    HALF_WAD,
    WAD,
    RAY,
    ZERO,
    emptyKey as emptySolanaKey,
    SolanaError,
    ConnectionContext as SolanaConnectionContext,
    ENDPOINTS as SOLANA_ENDPOINTS,
    WalletContext as SolanaWalletContext,
    WalletModalContext as SolanaWalletModalContext,
    useWallet as useSolanaWallet,
    getAccount as getSolanaAccount,
    getBalance as getSolanaBalance,
    useKeypair as useSolanaKeypair,
    usePubkey as useSolanaPubkey,
    useTokenAmount as useSolanaTokenAmount,
    useWalletModal as useSolanaWalletModal,
    WalletModal as SolanaWalletModal,
    WalletModalProvider as SolanaWalletModalProvider,
    WalletProvider as SolanaWalletProvider,
    getKeyPairFromPrivateKey as getSolanaKeyPairFromPrivateKey,
    getKeyPairFromSeedPhrase as getSolanaKeyPairFromSeedPhrase,
    getNativeKeyPairFromPrivateKey as getSolanaNativeKeyPairFromPrivateKey,
    getPublicKey as getSolanaPublicKey,
    sendFundsTransaction as sendFundsSolanaTransaction,
    getMultipleTransactions as getMultipleSolanaTransactions,
    connectionManager as solanaConnectionManager,
    fetchNftMetadata as fetchSolanaNftMetadata,
    MetadataKey as SolanaMetadataKey,
    MetadataCategory as SolanaMetadataCategory,
    MasterEditionV1 as SolanaMasterEditionV1,
    MasterEditionV2 as SolanaMasterEditionV2,
    EditionMarker as SolanaEditionMarker,
    Edition as SolanaEdition,
    Creator as SolanaCreator,
    Data as SolanaData,
    Metadata as SolanaMetadata,
    SequenceType as SolanaSequenceType,
    METADATA_SCHEMA as SOLANA_METADATA_SCHEMA,
    WRAPPED_SOL_MINT as SOLANA_WRAPPED_SOL_MINT,
    SafetyDepositBox as SolanaSafetyDepositBox,
    toPublicKey as toSolanaPublicKey,
    pubkeyToString as solanaPubkeyToString,
    accountsEqual as solanaAccountsEqual,
    findProgramAddress as findSolanaProgramAddress,
    getTokenName as getSolanaTokenName,
    getTokenByName as getSolanaTokenByName,
    isKnownMint as isSolanaKnownMint,
    toLamports as toSolanaLamports,
    fromLamports as fromSolanaLamports,
    formatTokenAmount as formatSolanaTokenAmount,
    validateSolAddress as validateSolanaAddress,
    publicKeyToAddress as solanaPublicKeyToAddress,
    addressToPublicKey as solanaAddressToPublicKey,
    getPublicKeyFromPrivateKey as getSolanaPublicKeyFromPrivateKey,
    getAdapterNetwork as getSolanaAdapterNetwork,
    setProgramIds as setSolanaProgramIds,
    programIds as solanaProgramIds,
    getStoreID as getSolanaStoreID,
    sendTransactions as sendSolanaTransactions,
    sendTransactionWithRetry as sendSolanaTransactionWithRetry,
    sendTransactionsWithManualRetry as sendSolanaTransactionsWithManualRetry,
    toUTF8Array,
    fromUTF8Array,
    findAssociatedTokenAddress as findSolanaAssociatedTokenAddress,
    getErrorForTransaction as getSolanaErrorForTransaction,
    convertMasterEditionV1ToV2 as convertSolanaMasterEditionV1ToV2,
    createMetadata as createSolanaMetadata,
    createMasterEdition as createSolanaMasterEdition,


} from './solana';
export * from './core';
export * from './encryption';
export * from './icon';
export * from './keypairs';
export * from './libs';
export * from './tickers';
export * from './types';