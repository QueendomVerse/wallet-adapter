{"version":3,"file":"index.cjs.js","sources":["../src/caip.ts","../src/crypto.ts","../src/misc.ts","../src/relay.ts","../src/uri.ts","../src/namespaces.ts","../src/errors.ts","../src/validators.ts"],"sourcesContent":["import { SessionTypes, ProposalTypes } from \"@walletconnect/types\";\n\ninterface ChainIdParams {\n  namespace: string;\n  reference: string;\n}\n\ninterface AccountIdParams extends ChainIdParams {\n  address: string;\n}\n\nconst CAIP_DELIMITER = \":\";\n\nexport function parseChainId(chain: string): ChainIdParams {\n  const [namespace, reference] = chain.split(CAIP_DELIMITER);\n  return { namespace, reference };\n}\n\nexport function formatChainId(params: ChainIdParams): string {\n  const { namespace, reference } = params;\n  return [namespace, reference].join(CAIP_DELIMITER);\n}\n\nexport function parseAccountId(account: string): AccountIdParams {\n  const [namespace, reference, address] = account.split(CAIP_DELIMITER);\n  return { namespace, reference, address };\n}\n\nexport function formatAccountId(params: AccountIdParams): string {\n  const { namespace, reference, address } = params;\n  return [namespace, reference, address].join(CAIP_DELIMITER);\n}\n\nexport function getUniqueValues(array: string[], parser: (str: string) => string): string[] {\n  const unique: string[] = [];\n  array.forEach((str) => {\n    const value = parser(str);\n    if (!unique.includes(value)) unique.push(value);\n  });\n  return unique;\n}\n\nexport function getAddressFromAccount(account: string) {\n  const { address } = parseAccountId(account);\n  return address;\n}\n\nexport function getChainFromAccount(account: string) {\n  const { namespace, reference } = parseAccountId(account);\n  const chain = formatChainId({ namespace, reference });\n  return chain;\n}\n\nexport function formatAccountWithChain(address: string, chain: string) {\n  const { namespace, reference } = parseChainId(chain);\n  const account = formatAccountId({ namespace, reference, address });\n  return account;\n}\n\nexport function getAddressesFromAccounts(accounts: string[]) {\n  return getUniqueValues(accounts, getAddressFromAccount);\n}\n\nexport function getChainsFromAccounts(accounts: string[]) {\n  return getUniqueValues(accounts, getChainFromAccount);\n}\n\nexport function getAccountsFromNamespaces(\n  namespaces: SessionTypes.Namespaces,\n  keys: string[] = [],\n): string[] {\n  const accounts: string[] = [];\n  Object.keys(namespaces).forEach((key) => {\n    if (keys.length && !keys.includes(key)) return;\n    const ns = namespaces[key];\n    accounts.push(...ns.accounts);\n  });\n  return accounts;\n}\n\nexport function getChainsFromNamespaces(\n  namespaces: SessionTypes.Namespaces,\n  keys: string[] = [],\n): string[] {\n  const chains: string[] = [];\n  Object.keys(namespaces).forEach((key) => {\n    if (keys.length && !keys.includes(key)) return;\n    const ns = namespaces[key];\n    chains.push(...getChainsFromAccounts(ns.accounts));\n  });\n  return chains;\n}\n\nexport function getChainsFromRequiredNamespaces(\n  requiredNamespaces: ProposalTypes.RequiredNamespaces,\n  keys: string[] = [],\n): string[] {\n  const chains: string[] = [];\n  Object.keys(requiredNamespaces).forEach((key) => {\n    if (keys.length && !keys.includes(key)) return;\n    const ns = requiredNamespaces[key];\n    chains.push(...ns.chains);\n  });\n  return chains;\n}\n","import { ChaCha20Poly1305 } from \"@stablelib/chacha20poly1305\";\nimport { HKDF } from \"@stablelib/hkdf\";\nimport { randomBytes } from \"@stablelib/random\";\nimport { hash, SHA256 } from \"@stablelib/sha256\";\nimport * as x25519 from \"@stablelib/x25519\";\nimport { CryptoTypes } from \"@walletconnect/types\";\nimport { concat, fromString, toString } from \"uint8arrays\";\n\nexport const BASE10 = \"base10\";\nexport const BASE16 = \"base16\";\nexport const BASE64 = \"base64pad\";\nexport const UTF8 = \"utf8\";\n\nexport const TYPE_0 = 0;\nexport const TYPE_1 = 1;\n\nconst ZERO_INDEX = 0;\nconst TYPE_LENGTH = 1;\nconst IV_LENGTH = 12;\nconst KEY_LENGTH = 32;\n\nexport function generateKeyPair(): CryptoTypes.KeyPair {\n  const keyPair = x25519.generateKeyPair();\n  return {\n    privateKey: toString(keyPair.secretKey, BASE16),\n    publicKey: toString(keyPair.publicKey, BASE16),\n  };\n}\n\nexport function generateRandomBytes32(): string {\n  const random = randomBytes(KEY_LENGTH);\n  return toString(random, BASE16);\n}\n\nexport function deriveSymKey(privateKeyA: string, publicKeyB: string): string {\n  const sharedKey = x25519.sharedKey(\n    fromString(privateKeyA, BASE16),\n    fromString(publicKeyB, BASE16),\n  );\n  const hkdf = new HKDF(SHA256, sharedKey);\n  const symKey = hkdf.expand(KEY_LENGTH);\n  return toString(symKey, BASE16);\n}\n\nexport function hashKey(key: string): string {\n  const result = hash(fromString(key, BASE16));\n  return toString(result, BASE16);\n}\n\nexport function hashMessage(message: string): string {\n  const result = hash(fromString(message, UTF8));\n  return toString(result, BASE16);\n}\n\nexport function encodeTypeByte(type: number): Uint8Array {\n  return fromString(`${type}`, BASE10);\n}\n\nexport function decodeTypeByte(byte: Uint8Array): number {\n  return Number(toString(byte, BASE10));\n}\n\nexport function encrypt(params: CryptoTypes.EncryptParams): string {\n  const type = encodeTypeByte(typeof params.type !== \"undefined\" ? params.type : TYPE_0);\n  if (decodeTypeByte(type) === TYPE_1 && typeof params.senderPublicKey === \"undefined\") {\n    throw new Error(\"Missing sender public key for type 1 envelope\");\n  }\n  const senderPublicKey =\n    typeof params.senderPublicKey !== \"undefined\"\n      ? fromString(params.senderPublicKey, BASE16)\n      : undefined;\n\n  const iv =\n    typeof params.iv !== \"undefined\" ? fromString(params.iv, BASE16) : randomBytes(IV_LENGTH);\n  const box = new ChaCha20Poly1305(fromString(params.symKey, BASE16));\n  const sealed = box.seal(iv, fromString(params.message, UTF8));\n  return serialize({ type, sealed, iv, senderPublicKey });\n}\n\nexport function decrypt(params: CryptoTypes.DecryptParams): string {\n  const box = new ChaCha20Poly1305(fromString(params.symKey, BASE16));\n  const { sealed, iv } = deserialize(params.encoded);\n  const message = box.open(iv, sealed);\n  if (message === null) throw new Error(\"Failed to decrypt\");\n  return toString(message, UTF8);\n}\n\nexport function serialize(params: CryptoTypes.EncodingParams): string {\n  if (decodeTypeByte(params.type) === TYPE_1) {\n    if (typeof params.senderPublicKey === \"undefined\") {\n      throw new Error(\"Missing sender public key for type 1 envelope\");\n    }\n    return toString(\n      concat([params.type, params.senderPublicKey, params.iv, params.sealed]),\n      BASE64,\n    );\n  }\n  // default to type 0 envelope\n  return toString(concat([params.type, params.iv, params.sealed]), BASE64);\n}\n\nexport function deserialize(encoded: string): CryptoTypes.EncodingParams {\n  const bytes = fromString(encoded, BASE64);\n  const type = bytes.slice(ZERO_INDEX, TYPE_LENGTH);\n  const slice1 = TYPE_LENGTH;\n  if (decodeTypeByte(type) === TYPE_1) {\n    const slice2 = slice1 + KEY_LENGTH;\n    const slice3 = slice2 + IV_LENGTH;\n    const senderPublicKey = bytes.slice(slice1, slice2);\n    const iv = bytes.slice(slice2, slice3);\n    const sealed = bytes.slice(slice3);\n    return { type, sealed, iv, senderPublicKey };\n  }\n  // default to type 0 envelope\n  const slice2 = slice1 + IV_LENGTH;\n  const iv = bytes.slice(slice1, slice2);\n  const sealed = bytes.slice(slice2);\n  return { type, sealed, iv };\n}\n\nexport function validateDecoding(\n  encoded: string,\n  opts?: CryptoTypes.DecodeOptions,\n): CryptoTypes.EncodingValidation {\n  const deserialized = deserialize(encoded);\n  return validateEncoding({\n    type: decodeTypeByte(deserialized.type),\n    senderPublicKey:\n      typeof deserialized.senderPublicKey !== \"undefined\"\n        ? toString(deserialized.senderPublicKey, BASE16)\n        : undefined,\n    receiverPublicKey: opts?.receiverPublicKey,\n  });\n}\n\nexport function validateEncoding(opts?: CryptoTypes.EncodeOptions): CryptoTypes.EncodingValidation {\n  const type = opts?.type || TYPE_0;\n  if (type === TYPE_1) {\n    if (typeof opts?.senderPublicKey === \"undefined\") {\n      throw new Error(\"missing sender public key\");\n    }\n    if (typeof opts?.receiverPublicKey === \"undefined\") {\n      throw new Error(\"missing receiver public key\");\n    }\n  }\n  return {\n    type,\n    senderPublicKey: opts?.senderPublicKey,\n    receiverPublicKey: opts?.receiverPublicKey,\n  };\n}\n\nexport function isTypeOneEnvelope(\n  result: CryptoTypes.EncodingValidation,\n): result is CryptoTypes.TypeOneParams {\n  return (\n    result.type === TYPE_1 &&\n    typeof result.senderPublicKey === \"string\" &&\n    typeof result.receiverPublicKey === \"string\"\n  );\n}\n","import { detect } from \"detect-browser\";\nimport { FIVE_MINUTES, fromMiliseconds, toMiliseconds } from \"@walletconnect/time\";\nimport {\n  SignClientTypes,\n  RelayerClientMetadata,\n  EngineTypes,\n  RelayerTypes,\n} from \"@walletconnect/types\";\nimport { getDocument, getLocation, getNavigator } from \"@walletconnect/window-getters\";\nimport { getWindowMetadata } from \"@walletconnect/window-metadata\";\nimport { ErrorResponse } from \"@walletconnect/jsonrpc-utils\";\nimport * as qs from \"query-string\";\n\n// -- constants -----------------------------------------//\n\nexport const REACT_NATIVE_PRODUCT = \"ReactNative\";\n\nexport const ENV_MAP = {\n  reactNative: \"react-native\",\n  node: \"node\",\n  browser: \"browser\",\n  unknown: \"unknown\",\n};\n\nexport const EMPTY_SPACE = \" \";\n\nexport const COLON = \":\";\n\nexport const SLASH = \"/\";\n\nexport const DEFAULT_DEPTH = 2;\n\nexport const ONE_THOUSAND = 1000;\n\nexport const SDK_TYPE = \"js\";\n\n// -- env -----------------------------------------------//\n\nexport function isNode(): boolean {\n  return (\n    typeof process !== \"undefined\" &&\n    typeof process.versions !== \"undefined\" &&\n    typeof process.versions.node !== \"undefined\"\n  );\n}\n\nexport function isReactNative(): boolean {\n  return !getDocument() && !!getNavigator() && navigator.product === REACT_NATIVE_PRODUCT;\n}\n\nexport function isBrowser(): boolean {\n  return !isNode() && !!getNavigator();\n}\n\nexport function getEnvironment(): string {\n  if (isReactNative()) return ENV_MAP.reactNative;\n  if (isNode()) return ENV_MAP.node;\n  if (isBrowser()) return ENV_MAP.browser;\n  return ENV_MAP.unknown;\n}\n\n// -- query -----------------------------------------------//\n\nexport function appendToQueryString(queryString: string, newQueryParams: any): string {\n  let queryParams = qs.parse(queryString);\n\n  queryParams = { ...queryParams, ...newQueryParams };\n\n  queryString = qs.stringify(queryParams);\n\n  return queryString;\n}\n\n// -- metadata ----------------------------------------------//\n\nexport function getAppMetadata(): SignClientTypes.Metadata {\n  return (\n    getWindowMetadata() || {\n      name: \"\",\n      description: \"\",\n      url: \"\",\n      icons: [\"\"],\n    }\n  );\n}\n\nexport function getRelayClientMetadata(protocol: string, version: number): RelayerClientMetadata {\n  const env = getEnvironment();\n\n  const metadata: RelayerClientMetadata = { protocol, version, env };\n  if (env === \"browser\") {\n    metadata.host = getLocation()?.host || \"unknown\";\n  }\n  return metadata;\n}\n\n// -- rpcUrl ----------------------------------------------//\n\nexport function getJavascriptOS() {\n  const info = detect();\n  if (info === null) return \"unknown\";\n  const os = info.os ? info.os.replace(\" \", \"\").toLowerCase() : \"unknown\";\n  if (info.type === \"browser\") {\n    return [os, info.name, info.version].join(\"-\");\n  }\n  return [os, info.version].join(\"-\");\n}\n\nexport function getJavascriptID() {\n  const env = getEnvironment();\n  return env === ENV_MAP.browser ? [env, getLocation()?.host || \"unknown\"].join(\":\") : env;\n}\n\nexport function formatUA(protocol: string, version: number, sdkVersion: string) {\n  const os = getJavascriptOS();\n  const id = getJavascriptID();\n  return [[protocol, version].join(\"-\"), [SDK_TYPE, sdkVersion].join(\"-\"), os, id].join(\"/\");\n}\nconsole;\n\nexport function formatRelayRpcUrl({\n  protocol,\n  version,\n  relayUrl,\n  sdkVersion,\n  auth,\n  projectId,\n}: RelayerTypes.RpcUrlParams) {\n  const splitUrl = relayUrl.split(\"?\");\n  const ua = formatUA(protocol, version, sdkVersion);\n  const params = { auth, ua, projectId };\n  const queryString = appendToQueryString(splitUrl[1] || \"\", params);\n  return splitUrl[0] + \"?\" + queryString;\n}\n\nexport function getHttpUrl(url: string) {\n  // regex from https://stackoverflow.com/questions/3883871/regexp-to-grab-protocol-from-url\n  const matches = url.match(/^[^:]+(?=:\\/\\/)/gi) || [];\n  let protocol = matches[0];\n  const domain = typeof protocol !== \"undefined\" ? url.split(\"://\")[1] : url;\n  protocol = protocol === \"wss\" ? \"https\" : \"http\";\n  return [protocol, domain].join(\"://\");\n}\n\n// -- assert ------------------------------------------------- //\n\nexport function assertType(obj: any, key: string, type: string) {\n  if (!obj[key] || typeof obj[key] !== type) {\n    throw new Error(`Missing or invalid \"${key}\" param`);\n  }\n}\n\n// -- context ------------------------------------------------- //\n\nexport function parseContextNames(context: string, depth = DEFAULT_DEPTH) {\n  return getLastItems(context.split(SLASH), depth);\n}\n\nexport function formatMessageContext(context: string): string {\n  return parseContextNames(context).join(EMPTY_SPACE);\n}\n\n// -- array ------------------------------------------------- //\n\nexport function hasOverlap(a: any[], b: any[]): boolean {\n  const matches = a.filter((x) => b.includes(x));\n  return matches.length === a.length;\n}\n\nexport function getLastItems(arr: any[], depth = DEFAULT_DEPTH): any[] {\n  return arr.slice(Math.max(arr.length - depth, 0));\n}\n\n// -- map ------------------------------------------------- //\n\nexport function mapToObj<T = any>(map: Map<string, T>): Record<string, T> {\n  return Object.fromEntries(map.entries());\n}\n\nexport function objToMap<T = any>(obj: Record<string, T>): Map<string, T> {\n  return new Map<string, T>(Object.entries<T>(obj));\n}\n\nexport function mapEntries<A = any, B = any>(\n  obj: Record<string, A>,\n  cb: (x: A) => B,\n): Record<string, B> {\n  const res = {};\n  Object.keys(obj).forEach((key) => {\n    res[key] = cb(obj[key]);\n  });\n  return res;\n}\n\n// -- enum ------------------------------------------------- //\n\n// source: https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275\nexport const enumify = <T extends { [index: string]: U }, U extends string>(x: T): T => x;\n\n// -- string ------------------------------------------------- //\n\nexport function capitalizeWord(word: string) {\n  return word.trim().replace(/^\\w/, (c) => c.toUpperCase());\n}\n\nexport function capitalize(str: string) {\n  return str\n    .split(EMPTY_SPACE)\n    .map((w) => capitalizeWord(w))\n    .join(EMPTY_SPACE);\n}\n\n// -- time ------------------------------------------------- //\n\nexport function calcExpiry(ttl: number, now?: number): number {\n  return fromMiliseconds((now || Date.now()) + toMiliseconds(ttl));\n}\n\nexport function isExpired(expiry: number) {\n  return fromMiliseconds(Date.now()) >= toMiliseconds(expiry);\n}\n\n// -- promises --------------------------------------------- //\nexport function createDelayedPromise<T>() {\n  const timeout = toMiliseconds(FIVE_MINUTES);\n  let cacheResolve: undefined | ((value: T | PromiseLike<T>) => void);\n  let cacheReject: undefined | ((value?: ErrorResponse) => void);\n  let cacheTimeout: undefined | NodeJS.Timeout;\n\n  const done = () =>\n    new Promise<T>((promiseResolve, promiseReject) => {\n      cacheTimeout = setTimeout(promiseReject, timeout);\n      cacheResolve = promiseResolve;\n      cacheReject = promiseReject;\n    });\n  const resolve = (value?: T) => {\n    if (cacheTimeout && cacheResolve) {\n      clearTimeout(cacheTimeout);\n      cacheResolve(value as T);\n    }\n  };\n  const reject = (value?: ErrorResponse) => {\n    if (cacheTimeout && cacheReject) {\n      clearTimeout(cacheTimeout);\n      cacheReject(value);\n    }\n  };\n\n  return {\n    resolve,\n    reject,\n    done,\n  };\n}\n\n// -- expirer --------------------------------------------- //\n\nexport function formatExpirerTarget(type: \"topic\" | \"id\", value: string | number): string {\n  if (typeof value === \"string\" && value.startsWith(`${type}:`)) return value;\n  if (type.toLowerCase() === \"topic\") {\n    if (typeof value !== \"string\")\n      throw new Error(`Value must be \"string\" for expirer target type: topic`);\n    return `topic:${value}`;\n  } else if (type.toLowerCase() === \"id\") {\n    if (typeof value !== \"number\")\n      throw new Error(`Value must be \"number\" for expirer target type: id`);\n    return `id:${value}`;\n  }\n  throw new Error(`Unknown expirer target type: ${type}`);\n}\n\nexport function formatTopicTarget(topic: string): string {\n  return formatExpirerTarget(\"topic\", topic);\n}\n\nexport function formatIdTarget(id: number): string {\n  return formatExpirerTarget(\"id\", id);\n}\n\nexport function parseExpirerTarget(target: string) {\n  const [type, value] = target.split(\":\");\n  const parsed: { id?: number; topic?: string } = { id: undefined, topic: undefined };\n  if (type === \"topic\" && typeof value === \"string\") {\n    parsed.topic = value;\n  } else if (type === \"id\" && Number.isInteger(Number(value))) {\n    parsed.id = Number(value);\n  } else {\n    throw new Error(`Invalid target, expected id:number or topic:string, got ${type}:${value}`);\n  }\n\n  return parsed;\n}\n\n// -- events ---------------------------------------------- //\n\nexport function engineEvent(event: EngineTypes.Event, id?: number | string | undefined) {\n  return `${event}${id ? `:${id}` : \"\"}`;\n}\n","import { RELAY_JSONRPC } from \"@walletconnect/relay-api\";\nimport { RelayerTypes } from \"@walletconnect/types\";\n\nexport const RELAYER_DEFAULT_PROTOCOL = \"iridium\";\n\nexport function getRelayProtocolName(\n  opts?: RelayerTypes.RequestOptions,\n): RelayerTypes.ProtocolOptions {\n  return opts?.relay || { protocol: RELAYER_DEFAULT_PROTOCOL };\n}\n\nexport function getRelayProtocolApi(protocol: string) {\n  const jsonrpc = RELAY_JSONRPC[protocol];\n  if (typeof jsonrpc === \"undefined\") {\n    throw new Error(`Relay Protocol not supported: ${protocol}`);\n  }\n  return jsonrpc;\n}\n","import * as qs from \"query-string\";\nimport { EngineTypes, RelayerTypes } from \"@walletconnect/types\";\n\n// -- uri -------------------------------------------------- //\n\nexport function parseRelayParams(params: any, delimiter = \"-\"): RelayerTypes.ProtocolOptions {\n  const relay: any = {};\n  const prefix = \"relay\" + delimiter;\n  Object.keys(params).forEach((key) => {\n    if (key.startsWith(prefix)) {\n      const name = key.replace(prefix, \"\");\n      const value = params[key];\n      relay[name] = value;\n    }\n  });\n  return relay;\n}\n\nexport function parseUri(str: string): EngineTypes.UriParameters {\n  const pathStart: number = str.indexOf(\":\");\n  const pathEnd: number | undefined = str.indexOf(\"?\") !== -1 ? str.indexOf(\"?\") : undefined;\n  const protocol: string = str.substring(0, pathStart);\n  const path: string = str.substring(pathStart + 1, pathEnd);\n  const requiredValues = path.split(\"@\");\n  const queryString: string = typeof pathEnd !== \"undefined\" ? str.substring(pathEnd) : \"\";\n  const queryParams = qs.parse(queryString);\n  const result = {\n    protocol,\n    topic: requiredValues[0],\n    version: parseInt(requiredValues[1], 10),\n    symKey: queryParams.symKey as string,\n    relay: parseRelayParams(queryParams),\n  };\n  return result;\n}\n\nexport function formatRelayParams(relay: RelayerTypes.ProtocolOptions, delimiter = \"-\") {\n  const prefix = \"relay\";\n  const params: any = {};\n  Object.keys(relay).forEach((key) => {\n    const k = prefix + delimiter + key;\n    if (relay[key]) {\n      params[k] = relay[key];\n    }\n  });\n  return params;\n}\n\nexport function formatUri(params: EngineTypes.UriParameters): string {\n  return (\n    `${params.protocol}:${params.topic}@${params.version}?` +\n    qs.stringify({\n      symKey: params.symKey,\n      ...formatRelayParams(params.relay),\n    })\n  );\n}\n","import { SessionTypes } from \"@walletconnect/types\";\n\nexport function getAccountsChains(accounts: SessionTypes.Namespace[\"accounts\"]) {\n  const chains: string[] = [];\n  accounts.forEach((account) => {\n    const [chain, chainId] = account.split(\":\");\n    chains.push(`${chain}:${chainId}`);\n  });\n\n  return chains;\n}\n\nexport function getNamespacesChains(namespaces: SessionTypes.Namespaces) {\n  const chains: string[] = [];\n  Object.values(namespaces).forEach((namespace) => {\n    chains.push(...getAccountsChains(namespace.accounts));\n    if (namespace.extension) {\n      namespace.extension.forEach((extension) => {\n        chains.push(...getAccountsChains(extension.accounts));\n      });\n    }\n  });\n\n  return chains;\n}\n\nexport function getNamespacesMethodsForChainId(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n) {\n  const methods: SessionTypes.Namespace[\"methods\"] = [];\n  Object.values(namespaces).forEach((namespace) => {\n    const chains = getAccountsChains(namespace.accounts);\n    if (chains.includes(chainId)) methods.push(...namespace.methods);\n    if (namespace.extension) {\n      namespace.extension.forEach((extension) => {\n        const extensionChains = getAccountsChains(extension.accounts);\n        if (extensionChains.includes(chainId)) methods.push(...extension.methods);\n      });\n    }\n  });\n\n  return methods;\n}\n\nexport function getNamespacesEventsForChainId(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n) {\n  const events: SessionTypes.Namespace[\"events\"] = [];\n  Object.values(namespaces).forEach((namespace) => {\n    const chains = getAccountsChains(namespace.accounts);\n    if (chains.includes(chainId)) events.push(...namespace.events);\n    if (namespace.extension) {\n      namespace.extension.forEach((extension) => {\n        const extensionChains = getAccountsChains(extension.accounts);\n        if (extensionChains.includes(chainId)) events.push(...extension.events);\n      });\n    }\n  });\n\n  return events;\n}\n","/**\n * Types\n */\ntype SdkErrorKey = keyof typeof SDK_ERRORS;\ntype InternalErrorKey = keyof typeof INTERNAL_ERRORS;\n\n/**\n * Constants\n */\nconst SDK_ERRORS = {\n  /* ----- INVALID (1xxx) ----- */\n  INVALID_METHOD: {\n    message: \"Invalid method.\",\n    code: 1001,\n  },\n  INVALID_EVENT: {\n    message: \"Invalid event.\",\n    code: 1002,\n  },\n  INVALID_UPDATE_REQUEST: {\n    message: \"Invalid update request.\",\n    code: 1003,\n  },\n  INVALID_EXTEND_REQUEST: {\n    message: \"Invalid extend request.\",\n    code: 1004,\n  },\n  INVALID_SESSION_SETTLE_REQUEST: {\n    message: \"Invalid session settle request.\",\n    code: 1005,\n  },\n  /* ----- UNAUTHORIZED (3xxx) ----- */\n  UNAUTHORIZED_METHOD: {\n    message: \"Unauthorized method.\",\n    code: 3001,\n  },\n  UNAUTHORIZED_EVENT: {\n    message: \"Unauthorized event.\",\n    code: 3002,\n  },\n  UNAUTHORIZED_UPDATE_REQUEST: {\n    message: \"Unauthorized update request.\",\n    code: 3003,\n  },\n  UNAUTHORIZED_EXTEND_REQUEST: {\n    message: \"Unauthorized extend request.\",\n    code: 3004,\n  },\n  /* ----- REJECTED (5xxx) ----- */\n  USER_REJECTED: {\n    message: \"User rejected.\",\n    code: 5000,\n  },\n  USER_REJECTED_CHAINS: {\n    message: \"User rejected chains.\",\n    code: 5001,\n  },\n  USER_REJECTED_METHODS: {\n    message: \"User rejected methods.\",\n    code: 5002,\n  },\n  USER_REJECTED_EVENTS: {\n    message: \"User rejected events.\",\n    code: 5003,\n  },\n  UNSUPPORTED_CHAINS: {\n    message: \"Unsupported chains.\",\n    code: 5100,\n  },\n  UNSUPPORTED_METHODS: {\n    message: \"Unsupported methods.\",\n    code: 5101,\n  },\n  UNSUPPORTED_EVENTS: {\n    message: \"Unsupported events.\",\n    code: 5102,\n  },\n  UNSUPPORTED_ACCOUNTS: {\n    message: \"Unsupported accounts.\",\n    code: 5103,\n  },\n  UNSUPPORTED_NAMESPACE_KEY: {\n    message: \"Unsupported namespace key.\",\n    code: 5104,\n  },\n  /* ----- REASON (6xxx) ----- */\n  USER_DISCONNECTED: {\n    message: \"User disconnected.\",\n    code: 6000,\n  },\n  /* ----- FAILURE (7xxx) ----- */\n  SESSION_SETTLEMENT_FAILED: {\n    message: \"Session settlement failed.\",\n    code: 7000,\n  },\n};\n\nconst INTERNAL_ERRORS = {\n  NOT_INITIALIZED: {\n    message: \"Not initialized.\",\n    code: 1,\n  },\n  NO_MATCHING_KEY: {\n    message: \"No matching key.\",\n    code: 2,\n  },\n  RESTORE_WILL_OVERRIDE: {\n    message: \"Restore will override.\",\n    code: 3,\n  },\n  RESUBSCRIBED: {\n    message: \"Resubscribed.\",\n    code: 4,\n  },\n  MISSING_OR_INVALID: {\n    message: \"Missing or invalid.\",\n    code: 5,\n  },\n  EXPIRED: {\n    message: \"Expired.\",\n    code: 6,\n  },\n  UNKNOWN_TYPE: {\n    message: \"Unknown type.\",\n    code: 7,\n  },\n  MISMATCHED_TOPIC: {\n    message: \"Mismatched topic.\",\n    code: 8,\n  },\n  NON_CONFORMING_NAMESPACES: {\n    message: \"Non conforming namespaces.\",\n    code: 9,\n  },\n};\n\n/**\n * Utilities\n */\nexport function getInternalError(key: InternalErrorKey, context?: string | number) {\n  const { message, code } = INTERNAL_ERRORS[key];\n  return {\n    message: context ? `${message} ${context}` : message,\n    code,\n  };\n}\n\nexport function getSdkError(key: SdkErrorKey, context?: string | number) {\n  const { message, code } = SDK_ERRORS[key];\n  return {\n    message: context ? `${message} ${context}` : message,\n    code,\n  };\n}\n","import { SessionTypes, ProposalTypes, RelayerTypes, EngineTypes } from \"@walletconnect/types\";\nimport { ErrorResponse } from \"@walletconnect/jsonrpc-types\";\nimport {\n  getNamespacesChains,\n  getNamespacesMethodsForChainId,\n  getNamespacesEventsForChainId,\n  getAccountsChains,\n} from \"./namespaces\";\nimport { getSdkError, getInternalError } from \"./errors\";\nimport { hasOverlap } from \"./misc\";\n\nexport type ErrorObject = { message: string; code: number } | null;\n\n// -- types validation ----------------------------------------------------- //\n\nexport function isValidArray(arr: any, itemCondition?: (item: any) => boolean) {\n  if (Array.isArray(arr)) {\n    if (typeof itemCondition !== \"undefined\" && arr.length) {\n      return arr.every(itemCondition);\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function isValidObject(obj: any) {\n  return Object.getPrototypeOf(obj) === Object.prototype && Object.keys(obj).length;\n}\n\nexport function isUndefined(input: any): input is undefined {\n  return typeof input === \"undefined\";\n}\n\nexport function isValidString(input: any, optional: boolean): input is string {\n  if (optional && isUndefined(input)) return true;\n\n  return typeof input === \"string\" && Boolean(input.trim().length);\n}\n\nexport function isValidNumber(input: any, optional: boolean) {\n  if (optional && isUndefined(input)) return true;\n\n  return typeof input === \"number\" && !isNaN(input);\n}\n\n// -- protocol validation -------------------------------------------------- //\n\nexport function isSessionCompatible(session: SessionTypes.Struct, params: EngineTypes.FindParams) {\n  const { requiredNamespaces } = params;\n  const sessionKeys = Object.keys(session.namespaces);\n  const paramsKeys = Object.keys(requiredNamespaces);\n  let compatible = true;\n\n  if (!hasOverlap(paramsKeys, sessionKeys)) return false;\n\n  sessionKeys.forEach((key) => {\n    const { accounts, methods, events, extension } = session.namespaces[key];\n    const chains = getAccountsChains(accounts);\n    const requiredNamespace = requiredNamespaces[key];\n\n    if (\n      !hasOverlap(requiredNamespace.chains, chains) ||\n      !hasOverlap(requiredNamespace.methods, methods) ||\n      !hasOverlap(requiredNamespace.events, events)\n    ) {\n      compatible = false;\n    }\n\n    if (compatible && extension) {\n      extension.forEach((extensionNamespace) => {\n        const { accounts, methods, events } = extensionNamespace;\n        const chains = getAccountsChains(accounts);\n        const overlap = requiredNamespace.extension?.find(\n          (ext) =>\n            hasOverlap(ext.chains, chains) &&\n            hasOverlap(ext.methods, methods) &&\n            hasOverlap(ext.events, events),\n        );\n        if (!overlap) compatible = false;\n      });\n    }\n  });\n\n  return compatible;\n}\n\nexport function isValidChainId(value: any) {\n  if (isValidString(value, false) && value.includes(\":\")) {\n    const split = value.split(\":\");\n    return split.length === 2;\n  }\n  return false;\n}\n\nexport function isValidAccountId(value: any) {\n  if (isValidString(value, false) && value.includes(\":\")) {\n    const split = value.split(\":\");\n    if (split.length === 3) {\n      const chainId = split[0] + \":\" + split[1];\n      return !!split[2] && isValidChainId(chainId);\n    }\n  }\n  return false;\n}\n\nexport function isValidUrl(value: any) {\n  if (isValidString(value, false)) {\n    try {\n      const url = new URL(value);\n      return typeof url !== \"undefined\";\n    } catch (e) {\n      return false;\n    }\n  }\n  return false;\n}\n\nexport function isProposalStruct(input: any): input is ProposalTypes.Struct {\n  return input?.proposer?.publicKey;\n}\n\nexport function isSessionStruct(input: any): input is SessionTypes.Struct {\n  return input?.topic;\n}\n\nexport function isValidController(input: any, method: string) {\n  let error: ErrorObject = null;\n  if (!isValidString(input?.publicKey, false)) {\n    error = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `${method} controller public key should be a string`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidExtension(namespace: any, method: string) {\n  let error: ErrorObject = null;\n  if (!isUndefined(namespace?.extension)) {\n    if (!isValidArray(namespace.extension) || !namespace.extension.length) {\n      error = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `${method} extension should be an array of namespaces, or omitted`,\n      );\n    }\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceMethodsOrEvents(input: any): input is string {\n  let valid = true;\n  if (isValidArray(input)) {\n    if (input.length) {\n      valid = input.every((item: any) => isValidString(item, false));\n    }\n  } else {\n    valid = false;\n  }\n\n  return valid;\n}\n\nexport function isValidChains(key: string, chains: any, context: string) {\n  let error: ErrorObject = null;\n  if (isValidArray(chains)) {\n    chains.forEach((chain: any) => {\n      if (error) return;\n      if (!isValidChainId(chain) || !chain.includes(key)) {\n        error = getSdkError(\n          \"UNSUPPORTED_CHAINS\",\n          `${context}, chain ${chain} should be a string and conform to \"namespace:chainId\" format`,\n        );\n      }\n    });\n  } else {\n    error = getSdkError(\n      \"UNSUPPORTED_CHAINS\",\n      `${context}, chains ${chains} should be an array of strings conforming to \"namespace:chainId\" format`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceChains(namespaces: any, method: string) {\n  let error: ErrorObject = null;\n  Object.entries(namespaces).forEach(([key, namespace]: [string, any]) => {\n    if (error) return;\n    const validChainsError = isValidChains(key, namespace?.chains, `${method} requiredNamespace`);\n    const validExtensionError = isValidExtension(namespace, method);\n    if (validChainsError) {\n      error = validChainsError;\n    } else if (validExtensionError) {\n      error = validExtensionError;\n    } else if (namespace.extension) {\n      namespace.extension.forEach((extension: any) => {\n        if (error) return;\n        const validChainsError = isValidChains(key, extension.chains, `${method} extension`);\n        if (validChainsError) {\n          error = validChainsError;\n        }\n      });\n    }\n  });\n\n  return error;\n}\n\nexport function isValidAccounts(accounts: any, context: string) {\n  let error: ErrorObject = null;\n  if (isValidArray(accounts)) {\n    accounts.forEach((account: any) => {\n      if (error) return;\n      if (!isValidAccountId(account)) {\n        error = getSdkError(\n          \"UNSUPPORTED_ACCOUNTS\",\n          `${context}, account ${account} should be a string and conform to \"namespace:chainId:address\" format`,\n        );\n      }\n    });\n  } else {\n    error = getSdkError(\n      \"UNSUPPORTED_ACCOUNTS\",\n      `${context}, accounts should be an array of strings conforming to \"namespace:chainId:address\" format`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceAccounts(input: any, method: string) {\n  let error: ErrorObject = null;\n  Object.values(input).forEach((namespace: any) => {\n    if (error) return;\n    const validAccountsError = isValidAccounts(namespace?.accounts, `${method} namespace`);\n    const validExtensionError = isValidExtension(namespace, method);\n    if (validAccountsError) {\n      error = validAccountsError;\n    } else if (validExtensionError) {\n      error = validExtensionError;\n    } else if (namespace.extension) {\n      namespace.extension.forEach((extension: any) => {\n        if (error) return;\n        const validAccountsError = isValidAccounts(extension.accounts, `${method} extension`);\n        if (validAccountsError) {\n          error = validAccountsError;\n        }\n      });\n    }\n  });\n\n  return error;\n}\n\nexport function isValidActions(namespace: any, context: string) {\n  let error: ErrorObject = null;\n  if (!isValidNamespaceMethodsOrEvents(namespace?.methods)) {\n    error = getSdkError(\n      \"UNSUPPORTED_METHODS\",\n      `${context}, methods should be an array of strings or empty array for no methods`,\n    );\n  } else if (!isValidNamespaceMethodsOrEvents(namespace?.events)) {\n    error = getSdkError(\n      \"UNSUPPORTED_EVENTS\",\n      `${context}, events should be an array of strings or empty array for no events`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceActions(input: any, method: string) {\n  let error: ErrorObject = null;\n  Object.values(input).forEach((namespace: any) => {\n    if (error) return;\n    const validActionsError = isValidActions(namespace, `${method}, namespace`);\n    const validExtensionError = isValidExtension(namespace, method);\n    if (validActionsError) {\n      error = validActionsError;\n    } else if (validExtensionError) {\n      error = validExtensionError;\n    } else if (namespace.extension) {\n      namespace.extension.forEach((extension: any) => {\n        if (error) return;\n        const validActionsError = isValidActions(extension, `${method}, extension`);\n        if (validActionsError) {\n          error = validActionsError;\n        }\n      });\n    }\n  });\n\n  return error;\n}\n\nexport function isValidRequiredNamespaces(input: any, method: string) {\n  let error: ErrorObject = null;\n  if (input && isValidObject(input)) {\n    const validActionsError = isValidNamespaceActions(input, method);\n    if (validActionsError) {\n      error = validActionsError;\n    }\n    const validChainsError = isValidNamespaceChains(input, method);\n    if (validChainsError) {\n      error = validChainsError;\n    }\n  } else {\n    error = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `${method}, requiredNamespaces should be an object with data`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaces(input: any, method: string) {\n  let error: ErrorObject = null;\n  if (input && isValidObject(input)) {\n    const validActionsError = isValidNamespaceActions(input, method);\n    if (validActionsError) {\n      error = validActionsError;\n    }\n    const validAccountsError = isValidNamespaceAccounts(input, method);\n    if (validAccountsError) {\n      error = validAccountsError;\n    }\n  } else {\n    error = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `${method}, namespaces should be an object with data`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidRelay(input: any): input is RelayerTypes.ProtocolOptions {\n  return isValidString(input.protocol, true);\n}\n\nexport function isValidRelays(\n  input: any,\n  optional: boolean,\n): input is RelayerTypes.ProtocolOptions[] {\n  let valid = false;\n\n  if (optional && !input) valid = true;\n  else if (input && isValidArray(input) && input.length) {\n    input.forEach((relay: RelayerTypes.ProtocolOptions) => {\n      valid = isValidRelay(relay);\n    });\n  }\n\n  return valid;\n}\n\nexport function isValidId(input: any) {\n  return typeof input === \"number\";\n}\n\nexport function isValidParams(input: any) {\n  return typeof input !== \"undefined\" && typeof input !== null;\n}\n\nexport function isValidErrorReason(input: any): input is ErrorResponse {\n  if (!input) return false;\n  if (typeof input !== \"object\") return false;\n  if (!input.code || !isValidNumber(input.code, false)) return false;\n  if (!input.message || !isValidString(input.message, false)) return false;\n\n  return true;\n}\n\nexport function isValidRequest(request: any) {\n  if (isUndefined(request)) return false;\n  if (!isValidString(request.method, false)) return false;\n  return true;\n}\n\nexport function isValidResponse(response: any) {\n  if (isUndefined(response)) return false;\n  if (isUndefined(response.result) && isUndefined(response.error)) return false;\n  if (!isValidNumber(response.id, false)) return false;\n  if (!isValidString(response.jsonrpc, false)) return false;\n  return true;\n}\n\nexport function isValidEvent(event: any) {\n  if (isUndefined(event)) return false;\n  if (!isValidString(event.name, false)) return false;\n  return true;\n}\n\nexport function isValidNamespacesChainId(namespaces: SessionTypes.Namespaces, chainId: string) {\n  if (!isValidChainId(chainId)) return false;\n  const chains = getNamespacesChains(namespaces);\n  if (!chains.includes(chainId)) return false;\n\n  return true;\n}\n\nexport function isValidNamespacesRequest(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n  method: string,\n) {\n  if (!isValidString(method, false)) return false;\n  const methods = getNamespacesMethodsForChainId(namespaces, chainId);\n  return methods.includes(method);\n}\n\nexport function isValidNamespacesEvent(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n  eventName: string,\n) {\n  if (!isValidString(eventName, false)) return false;\n  const events = getNamespacesEventsForChainId(namespaces, chainId);\n  return events.includes(eventName);\n}\n\nexport function isConformingNamespaces(\n  requiredNamespaces: ProposalTypes.RequiredNamespaces,\n  namespaces: SessionTypes.Namespaces,\n  context: string,\n) {\n  let error: ErrorObject = null;\n  const requiredNamespaceKeys = Object.keys(requiredNamespaces);\n  const namespaceKeys = Object.keys(namespaces);\n\n  if (!hasOverlap(requiredNamespaceKeys, namespaceKeys)) {\n    error = getInternalError(\n      \"NON_CONFORMING_NAMESPACES\",\n      `${context} namespaces keys don't satisfy requiredNamespaces`,\n    );\n  } else {\n    requiredNamespaceKeys.forEach((key) => {\n      if (error) return;\n\n      const requiredNamespaceChains = requiredNamespaces[key].chains;\n      const namespaceChains = getAccountsChains(namespaces[key].accounts);\n\n      if (!hasOverlap(requiredNamespaceChains, namespaceChains)) {\n        error = getInternalError(\n          \"NON_CONFORMING_NAMESPACES\",\n          `${context} namespaces accounts don't satisfy requiredNamespaces chains for ${key}`,\n        );\n      } else if (!hasOverlap(requiredNamespaces[key].methods, namespaces[key].methods)) {\n        error = getInternalError(\n          \"NON_CONFORMING_NAMESPACES\",\n          `${context} namespaces methods don't satisfy requiredNamespaces methods for ${key}`,\n        );\n      } else if (!hasOverlap(requiredNamespaces[key].events, namespaces[key].events)) {\n        error = getInternalError(\n          \"NON_CONFORMING_NAMESPACES\",\n          `${context} namespaces events don't satisfy requiredNamespaces events for ${key}`,\n        );\n      } else if (requiredNamespaces[key].extension && !namespaces[key].extension) {\n        error = getInternalError(\n          \"NON_CONFORMING_NAMESPACES\",\n          `${context} namespaces extension doesn't satisfy requiredNamespaces extension for ${key}`,\n        );\n      } else if (requiredNamespaces[key].extension && namespaces[key].extension) {\n        requiredNamespaces[key].extension?.forEach(({ methods, events, chains }) => {\n          if (error) return;\n          const isOverlap = namespaces[key].extension?.find((namespace) => {\n            const accChains = getAccountsChains(namespace.accounts);\n            return (\n              hasOverlap(chains, accChains) &&\n              hasOverlap(events, namespace.events) &&\n              hasOverlap(methods, namespace.methods)\n            );\n          });\n\n          if (!isOverlap) {\n            error = getInternalError(\n              \"NON_CONFORMING_NAMESPACES\",\n              `${context} namespaces extension doesn't satisfy requiredNamespaces extension for ${key}`,\n            );\n          }\n        });\n      }\n    });\n  }\n\n  return error;\n}\n"],"names":["c","d","K","i","p","t","v","h","b","f","g","y","l","x","R","m","E","r","u","a","A","I"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,MAAuBA,GAAA,CAAA,GAAA,CAEM,SAAA,YAAA,CAAA,CAAA,CAA8B,CACzD,KAAM,CAAC,CAAW,CAAA,CAAA,CAAA,CAAa,CAAM,CAAA,KAAA,CAAMA,GAAc,CAAA,CACzD,OAAO,CAAE,SAAA,CAAA,CAAA,CAAW,SAAU,CAAA,CAAA,CAChC,CAEO,SAAA,aAAA,CAAuB,CAA+B,CAAA,CAC3D,KAAM,CAAE,SAAA,CAAA,CAAA,CAAW,SAAc,CAAA,CAAA,CAAA,CAAA,CAAA,CACjC,OAAO,CAAC,CAAA,CAAW,CAAS,CAAA,CAAE,KAAKA,GAAc,CACnD,CAEO,SAAA,cAAA,CAAwB,CAAkC,CAAA,CAC/D,KAAM,CAAC,EAAW,CAAW,CAAA,CAAA,CAAA,CAAW,CAAQ,CAAA,KAAA,CAAMA,GAAc,CACpE,CAAA,OAAO,CAAE,SAAA,CAAA,CAAA,CAAW,YAAW,OAAQ,CAAA,CAAA,CACzC,CAEO,SAAA,eAAA,CAAyB,CAAiC,CAAA,CAC/D,KAAM,CAAE,YAAW,SAAW,CAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAY,CAC1C,CAAA,OAAO,CAAC,CAAW,CAAA,CAAA,CAAW,CAAO,CAAA,CAAE,KAAKA,GAAc,CAC5D,CAEO,SAAA,eAAA,CAAyB,CAAiB,CAAA,CAAA,CAA2C,CAC1F,QAAyB,EAAC,CAC1B,OAAM,CAAA,CAAA,OAAA,CAAQ,CAAC,EAAQ,CACrB,QAAc,CAAO,CAAA,CAAG,CACxB,CAAK,CAAO,CAAA,QAAA,CAAS,CAAK,CAAA,EAAG,EAAO,IAAK,CAAA,CAAK,EAChD,CAAC,EACM,CACT,CAEsC,SAAA,qBAAA,CAAA,CAAA,CAAiB,CACrD,KAAM,CAAE,OAAY,CAAA,CAAA,CAAA,CAAA,cAAA,CAAe,CAAO,CAAA,CAC1C,OAAO,CACT,CAEoC,SAAA,mBAAA,CAAA,CAAA,CAAiB,CACnD,KAAM,CAAE,SAAW,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAc,cAAe,CAAA,CAAO,EAEvD,OADc,aAAA,CAAc,CAAE,SAAA,CAAA,CAAA,CAAW,SAAU,CAAA,CAAA,CAAC,CAEtD,iCAEuC,CAAiB,CAAA,CAAA,CAAe,CACrE,KAAM,CAAE,SAAW,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAc,YAAa,CAAA,CAAK,EAEnD,OADgB,eAAA,CAAgB,CAAE,SAAA,CAAA,CAAA,CAAW,SAAW,CAAA,CAAA,CAAA,OAAA,CAAA,CAAQ,CAAC,CAEnE,CAEyC,SAAA,wBAAA,CAAA,CAAA,CAAoB,CAC3D,OAAuB,eAAA,CAAA,CAAA,CAAU,qBAAqB,CACxD,CAEsC,SAAA,qBAAA,CAAA,CAAA,CAAoB,CACxD,OAAuB,eAAA,CAAA,CAAA,CAAU,mBAAmB,CACtD,CAGE,SAAA,yBAAA,CAAA,CAAA,CACA,CAAiB,CAAA,GACP,CACV,MAA2B,CAAA,CAAA,GAC3B,OAAO,MAAA,CAAA,IAAA,CAAK,CAAU,CAAA,CAAE,OAAQ,CAAC,CAAQ,EAAA,CACvC,GAAI,CAAK,CAAA,MAAA,EAAU,CAAC,CAAA,CAAK,SAAS,CAAG,CAAA,CAAG,OACxC,QAAW,CAAW,CAAA,CAAA,CAAA,CACtB,CAAS,CAAA,IAAA,CAAK,GAAG,CAAA,CAAG,QAAQ,EAC9B,CAAC,CACM,CAAA,CACT,CAEO,SAAA,uBAAA,CACL,EACA,CAAiB,CAAA,EACP,CAAA,CACV,MAAyB,CAAA,CAAA,EACzB,CAAA,OAAA,MAAA,CAAO,IAAK,CAAA,CAAU,CAAE,CAAA,OAAA,CAAQ,CAAS,EAAA,CACvC,GAAI,CAAA,CAAK,MAAU,EAAA,CAAC,CAAK,CAAA,QAAA,CAAS,CAAG,CAAG,CAAA,OACxC,MAAM,CAAA,CAAK,CAAW,CAAA,CAAA,CAAA,CACtB,CAAO,CAAA,IAAA,CAAK,GAAG,qBAAsB,CAAA,CAAA,CAAG,QAAQ,CAAC,EACnD,CAAC,CAAA,CACM,CACT,0CAGE,CACA,CAAA,CAAA,CAAiB,EAAC,CACR,CACV,MAAyB,CAAA,CAAA,GACzB,OAAO,MAAA,CAAA,IAAA,CAAK,CAAkB,CAAA,CAAE,QAAQ,CAAC,EAAQ,CAC/C,GAAI,EAAK,MAAU,EAAA,CAAC,CAAK,CAAA,QAAA,CAAS,CAAG,CAAA,CAAG,OACxC,QAAW,CAAmB,CAAA,CAAA,CAAA,CAC9B,CAAO,CAAA,IAAA,CAAK,GAAG,CAAG,CAAA,MAAM,EAC1B,CAAC,EACM,CACT;;AChGa,MAAA,MAAA,CAAS,QACT,CAAA,MAAA,CAAS,QACT,CAAA,MAAA,CAAS,WACT,CAAA,IAAA,CAAO,MAEP,CAAA,MAAA,CAAS,CACT,CAAA,MAAA,CAAS,EAEtB,MAAmB,CAAA,CAAA,CAAA,CACb,CAAc,CAAA,CAAA,CACdC,GAAY,CAAA,EAAA,CACZ,CAAa,CAAA,EAAA,CAEoC,SAAA,eAAA,EAAA,CACrD,MAAgB,CAAA,CAAAC,YAAA,CAAO,eAAgB,EAAA,CACvC,OAAO,CACL,UAAY,CAAAC,oBAAA,CAAS,CAAQ,CAAA,SAAA,CAAW,MAAM,CAAA,CAC9C,SAAW,CAAAA,oBAAA,CAAS,CAAQ,CAAA,SAAA,CAAW,MAAM,CAC/C,CACF,CAEgD,SAAA,qBAAA,EAAA,CAC9C,MAAM,CAAA,CAASC,kBAAY,CAAA,CAAU,CACrC,CAAA,OAAgBD,oBAAA,CAAA,CAAA,CAAQ,MAAM,CAChC,CAE6B,SAAA,YAAA,CAAA,CAAA,CAAqB,CAA4B,CAAA,CAC5E,MAAM,CAAA,CAAYD,YAAO,CAAA,SAAA,CACvBG,sBAAW,CAAA,CAAA,CAAa,MAAM,CAAA,CAC9BA,sBAAW,CAAA,CAAA,CAAY,MAAM,CAC/B,CAEM,CAAA,CAAA,CAAS,IADOC,SAAA,CAAAC,aAAA,CAAQ,CAAS,CAAA,CACnB,MAAO,CAAA,CAAU,CACrC,CAAA,4BAAgB,CAAQ,CAAA,MAAM,CAChC,CAEwB,SAAA,OAAA,CAAA,CAAA,CAAqB,CAC3C,MAAe,CAAA,CAAAC,WAAA,CAAKH,sBAAW,CAAA,CAAA,CAAK,MAAM,CAAC,CAC3C,CAAA,OAAgBF,oBAAA,CAAA,CAAA,CAAQ,MAAM,CAChC,CAEO,SAAA,WAAA,CAAqB,CAAyB,CAAA,CACnD,MAAM,CAAA,CAASK,WAAK,CAAAH,sBAAA,CAAW,CAAS,CAAA,IAAI,CAAC,CAC7C,CAAA,OAAgBF,oBAAA,CAAA,CAAA,CAAQ,MAAM,CAChC,CAEO,SAAA,cAAA,CAAwB,CAA0B,CAAA,CACvD,OAAOE,sBAAA,CAAW,CAAG,EAAA,CAAA,CAAA,CAAA,CAAQ,MAAM,CACrC,CAEO,SAAA,cAAA,CAAwB,CAA0B,CAAA,CACvD,OAAO,MAAA,CAAOF,oBAAS,CAAA,CAAA,CAAM,MAAM,CAAC,CACtC,CAEwB,SAAA,OAAA,CAAA,CAAA,CAA2C,CACjE,MAAM,CAAA,CAAO,cAAe,CAAA,OAAc,CAAA,CAAA,IAAA,EAAS,WAAc,CAAA,CAAA,CAAO,IAAO,CAAA,MAAM,CACrF,CAAA,GAAI,cAAe,CAAA,CAAI,CAAM,GAAA,MAAA,EAAU,OAAO,CAAA,CAAO,eAAoB,EAAA,WAAA,CACvE,MAAM,IAAU,KAAA,CAAA,+CAA+C,CAEjE,CAAA,MACE,CAAA,CAAA,OAAc,CAAA,CAAA,eAAA,EAAoB,YAC9BE,sBAAW,CAAA,CAAA,CAAO,eAAiB,CAAA,MAAM,CACzC,CAAA,KAAA,CAAA,CAEA,CACJ,CAAA,OAAc,CAAA,CAAA,EAAA,EAAO,WAAc,CAAAA,sBAAA,CAAW,CAAO,CAAA,EAAA,CAAI,MAAM,CAAA,CAAID,kBAAY,CAAAH,GAAS,CAEpF,CAAA,CAAA,CAAS,IADkBQ,iCAAA,CAAAJ,sBAAA,CAAW,CAAO,CAAA,MAAA,CAAQ,MAAM,CAAC,CAC/C,CAAA,IAAA,CAAK,EAAIA,sBAAW,CAAA,CAAA,CAAO,OAAS,CAAA,IAAI,CAAC,CAAA,CAC5D,OAAO,SAAA,CAAU,CAAE,IAAA,CAAA,CAAA,CAAM,MAAQ,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAI,eAAgB,CAAA,CAAA,CAAC,CACxD,CAEwB,SAAA,OAAA,CAAA,CAAA,CAA2C,CACjE,MAAY,CAAA,CAAA,IAAqBI,iCAAA,CAAAJ,sBAAA,CAAW,CAAO,CAAA,MAAA,CAAQ,MAAM,CAAC,CAC5D,CAAA,CAAE,SAAQ,EAAO,CAAA,CAAA,CAAA,CAAA,WAAA,CAAY,CAAO,CAAA,OAAO,CAC3C,CAAA,CAAA,CAAU,CAAI,CAAA,IAAA,CAAK,CAAI,CAAA,CAAM,CACnC,CAAA,GAAI,CAAY,GAAA,IAAA,CAAM,MAAM,IAAU,KAAA,CAAA,mBAAmB,CACzD,CAAA,OAAgBF,oBAAA,CAAA,CAAA,CAAS,IAAI,CAC/B,CAEO,SAAA,SAAA,CAAmB,CAA4C,CAAA,CACpE,GAAI,cAAA,CAAe,EAAO,IAAI,CAAA,GAAM,MAAQ,CAAA,CAC1C,GAAI,OAAc,CAAA,CAAA,eAAA,EAAoB,WACpC,CAAA,MAAU,IAAA,KAAA,CAAM,+CAA+C,CAAA,CAEjE,OAAOA,oBAAA,CACLO,kBAAO,CAAA,CAAC,CAAO,CAAA,IAAA,CAAM,CAAO,CAAA,eAAA,CAAiB,CAAO,CAAA,EAAA,CAAI,CAAO,CAAA,MAAM,CAAC,CAAA,CACtE,MACF,CACF,CAEA,OAAOP,oBAAA,CAASO,kBAAO,CAAA,CAAC,CAAO,CAAA,IAAA,CAAM,CAAO,CAAA,EAAA,CAAI,CAAO,CAAA,MAAM,CAAC,CAAA,CAAG,MAAM,CACzE,CAEO,SAAA,WAAA,CAAqB,CAA6C,CAAA,CACvE,MAAM,CAAA,CAAQL,sBAAW,CAAA,CAAA,CAAS,MAAM,CAAA,CAClC,CAAO,CAAA,CAAA,CAAM,KAAM,CAAA,CAAA,CAAY,CAAW,CAAA,CAC1C,EAAS,CACf,CAAA,GAAI,cAAe,CAAA,CAAI,CAAM,GAAA,MAAA,CAAQ,CACnC,MAAe,CAAA,CAAA,CAAA,CAAS,CAClB,CAAA,CAAA,CAAS,CAAS,CAAAJ,GAAA,CAClB,CAAkB,CAAA,CAAA,CAAM,KAAM,CAAA,CAAA,CAAQ,CAAM,CAAA,CAC5C,CAAK,CAAA,CAAA,CAAM,KAAM,CAAA,CAAA,CAAQ,CAAM,CAAA,CAC/B,CAAS,CAAA,CAAA,CAAM,KAAM,CAAA,CAAM,EACjC,OAAO,CAAE,IAAM,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAQ,EAAI,CAAA,CAAA,CAAA,eAAA,CAAA,CAAgB,CAC7C,CAEA,MAAM,CAAA,CAAS,CAAS,CAAAA,GAAA,CAClB,CAAK,CAAA,CAAA,CAAM,KAAM,CAAA,CAAA,CAAQ,CAAM,CAAA,CAC/B,CAAS,CAAA,CAAA,CAAM,KAAM,CAAA,CAAM,CACjC,CAAA,OAAO,CAAE,IAAA,CAAA,CAAA,CAAM,MAAQ,CAAA,CAAA,CAAA,EAAA,CAAA,CAAG,CAC5B,2BAGE,CACA,CAAA,CAAA,CACgC,CAChC,MAAqB,CAAA,CAAA,WAAA,CAAY,CAAO,CAAA,CACxC,OAAO,gBAAA,CAAiB,CACtB,IAAA,CAAM,cAAe,CAAA,CAAA,CAAa,IAAI,CAAA,CACtC,eACE,CAAA,OAAoB,CAAA,CAAA,eAAA,EAAoB,WACpC,CAAAE,oBAAA,CAAS,CAAa,CAAA,eAAA,CAAiB,MAAM,CAAA,CAC7C,KACN,CAAA,CAAA,iBAAA,CAAmB,CAAM,EAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,iBAC3B,CAAC,CACH,CAEiC,SAAA,gBAAA,CAAA,CAAA,CAAkE,CACjG,MAAa,CAAA,CAAA,CAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAM,IAAQ,GAAA,MAAA,CAC3B,GAAI,CAAA,GAAS,MAAQ,CAAA,CACnB,GAAI,OAAa,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,eAAA,CAAA,EAAoB,WACnC,CAAA,MAAU,IAAA,KAAA,CAAM,2BAA2B,CAAA,CAE7C,GAAI,OAAa,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,iBAAA,CAAA,EAAsB,WACrC,CAAA,MAAU,IAAA,KAAA,CAAM,6BAA6B,CAEjD,CACA,OAAO,CACL,IAAA,CAAA,CAAA,CACA,eAAiB,CAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAM,eACvB,CAAA,iBAAA,CAAmB,CAAM,EAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,iBAC3B,CACF,CAGE,SAAA,iBAAA,CAAA,CAAA,CACqC,CACrC,OACS,CAAA,CAAA,IAAA,GAAS,MAChB,EAAA,OAAc,CAAA,CAAA,eAAA,EAAoB,QAClC,EAAA,OAAc,CAAA,CAAA,iBAAA,EAAsB,QAExC;;AChKA,IAAAQ,GAAA,CAAA,MAAA,CAAA,cAAA,CAAA,IAAAF,GAAA,CAAA,MAAA,CAAA,qBAAA,CAAA,IAAA,CAAA,CAAA,MAAA,CAAA,SAAA,CAAA,cAAA,CAAA,CAAA,CAAA,MAAA,CAAA,SAAA,CAAA,oea,MAAA,oBAAA,CAAuB,cAEvB,OAAU,CAAA,CACrB,YAAa,cACb,CAAA,IAAA,CAAM,OACN,OAAS,CAAA,SAAA,CACT,QAAS,SACX,CAAA,CAEa,YAAc,GAEd,CAAA,KAAA,CAAQ,GAER,CAAA,KAAA,CAAQ,IAER,aAAgB,CAAA,CAAA,CAEhB,aAAe,GAEf,CAAA,QAAA,CAAW,KAIU,SAAA,MAAA,EAAA,CAChC,OACS,OAAA,OAAA,EAAY,aACnB,OAAO,OAAA,CAAQ,UAAa,WAC5B,EAAA,eAAe,QAAS,CAAA,IAAA,EAAS,WAErC,yBAEyC,CACvC,OAAO,CAACK,yBAAY,EAAA,EAAK,CAAC,CAACM,0BAAA,IAAkB,SAAU,CAAA,OAAA,GAAY,oBACrE,CAEO,SAAA,SAAA,EAA8B,CACnC,OAAO,CAAC,QAAY,EAAA,CAAC,CAACA,0BAAA,EACxB,CAEO,SAAA,cAAA,EAAkC,CACvC,OAAI,aAAA,GAAwB,OAAQ,CAAA,WAAA,CAChC,QAAiB,CAAA,OAAA,CAAQ,KACzB,SAAU,EAAA,CAAU,QAAQ,OACzB,CAAA,OAAA,CAAQ,OACjB,CAIO,SAAA,mBAAA,CAA6B,CAAqB,CAAA,CAAA,CAA6B,CACpF,IAAI,CAAA,CAAcC,aAAG,KAAM,CAAA,CAAW,EAEtC,OAAc,CAAA,CAAAT,GAAA,CAAAA,GAAA,CAAA,EAAA,CAAK,GAAgB,CAEnC,CAAA,CAAA,CAAA,CAAcS,aAAG,SAAU,CAAA,CAAW,EAE/B,CACT,0BAI2D,CACzD,OACoBC,gCAAA,EAAA,EAAK,CACrB,IAAM,CAAA,EAAA,CACN,YAAa,EACb,CAAA,GAAA,CAAK,GACL,KAAO,CAAA,CAAC,EAAE,CACZ,CAEJ,CAEuC,SAAA,sBAAA,CAAA,CAAA,CAAkB,EAAwC,CAtFjG,IAAA,CAAA,CAuFE,MAAY,CAAA,CAAA,cAAA,EAEN,CAAA,CAAA,CAAkC,CAAE,QAAU,CAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CAAS,KAAI,CACjE,CAAA,WAAY,SACV,GAAA,CAAA,CAAS,KAAO,CAAY,CAAA,CAAA,CAAAC,yBAAA,EAAA,GAAZ,cAAe,IAAQ,GAAA,SAAA,CAAA,CAElC,CACT,CAIO,SAAA,eAAA,EAA2B,CAChC,MAAM,CAAA,CAAOC,oBAAO,EAAA,CACpB,GAAI,CAAS,GAAA,IAAA,CAAM,OAAO,SAC1B,CAAA,QAAW,CAAK,CAAA,EAAA,CAAK,EAAK,EAAG,CAAA,OAAA,CAAQ,IAAK,EAAE,CAAA,CAAE,aAAgB,CAAA,SAAA,CAC9D,OAAS,CAAA,CAAA,IAAA,GAAS,SACT,CAAA,CAAC,EAAI,CAAK,CAAA,IAAA,CAAM,EAAK,OAAO,CAAA,CAAE,KAAK,GAAG,CAAA,CAExC,CAAC,CAAI,CAAA,CAAA,CAAK,OAAO,CAAE,CAAA,IAAA,CAAK,GAAG,CACpC,2BAEkC,CA5GlC,IAAA,CAAA,CA6GE,MAAM,CAAA,CAAM,gBACZ,CAAA,WAAe,OAAQ,CAAA,OAAA,CAAU,CAAC,CAAK,CAAA,CAAA,CAAA,CAAA,CAAAD,yBAAA,KAAA,IAAe,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,IAAA,GAAQ,SAAS,CAAE,CAAA,IAAA,CAAK,GAAG,CAAI,CAAA,CACvF,CAEyB,SAAA,QAAA,CAAA,CAAA,CAAkB,CAAiB,CAAA,CAAA,CAAoB,CAC9E,MAAM,CAAA,CAAK,iBACL,CAAA,CAAA,CAAK,iBACX,CAAA,OAAO,CAAC,CAAC,CAAA,CAAU,CAAO,CAAE,CAAA,IAAA,CAAK,GAAG,CAAG,CAAA,CAAC,SAAU,CAAU,CAAA,CAAE,IAAK,CAAA,GAAG,EAAG,CAAI,CAAA,CAAE,EAAE,IAAK,CAAA,GAAG,CAC3F,CAGO,SAAA,iBAAA,CAA2B,CAChC,QACA,CAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CACA,WACA,UACA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CACA,aAC4B,CAC5B,QAAiB,CAAS,CAAA,KAAA,CAAM,GAAG,CAAA,CAC7B,EAAK,QAAS,CAAA,CAAA,CAAU,EAAS,CAAU,CAAA,CAC3C,EAAS,CAAE,IAAA,CAAA,CAAA,CAAM,KAAI,SAAU,CAAA,CAAA,CAAA,CAC/B,EAAc,mBAAoB,CAAA,CAAA,CAAS,IAAM,EAAI,CAAA,CAAM,EACjE,OAAO,CAAA,CAAS,CAAK,CAAA,CAAA,GAAA,CAAM,CAC7B,CAEO,SAAA,UAAA,CAAoB,EAAa,CAGtC,MAAe,CADC,CAAA,CAAI,MAAM,mBAAmB,CAAA,EAAK,EAC3B,EAAA,CAAA,CAAA,CACvB,MAAe,CAAA,CAAA,UAAoB,WAAc,CAAA,CAAA,CAAI,KAAM,CAAA,KAAK,EAAE,CAAK,CAAA,CAAA,CAAA,CACvE,SAAW,CAAa,GAAA,KAAA,CAAQ,QAAU,MACnC,CAAA,CAAC,EAAU,CAAM,CAAA,CAAE,KAAK,KAAK,CACtC,CAI2B,SAAA,UAAA,CAAA,CAAA,CAAU,EAAa,CAAc,CAAA,CAC9D,GAAI,CAAC,CAAA,CAAI,IAAQ,OAAO,CAAA,CAAI,KAAS,CACnC,CAAA,UAAgB,KAAA,CAAA,CAAA,oBAAA,EAAuB,UAAY,CAEvD,4BAIkC,CAAiB,CAAA,CAAA,CAAQ,cAAe,CACxE,oBAAoB,CAAQ,CAAA,KAAA,CAAM,KAAK,CAAA,CAAG,CAAK,CACjD,+BAEqC,CAAyB,CAAA,CAC5D,OAAyB,iBAAA,CAAA,CAAO,EAAE,IAAK,CAAA,WAAW,CACpD,CAIO,SAAA,UAAA,CAAoB,EAAU,CAAmB,CAAA,CAEtD,OADgB,CAAA,CAAE,MAAO,CAAC,GAAM,CAAE,CAAA,QAAA,CAAS,CAAC,CAAC,CAAA,CAC9B,SAAW,CAAE,CAAA,MAC9B,CAE6B,SAAA,YAAA,CAAA,CAAA,CAAY,EAAQ,aAAsB,CAAA,CACrE,OAAW,CAAA,CAAA,KAAA,CAAM,KAAK,GAAI,CAAA,CAAA,CAAI,MAAS,CAAA,CAAA,CAAO,CAAC,CAAC,CAClD,CAIkC,SAAA,QAAA,CAAA,CAAA,CAAwC,CACxE,OAAO,MAAA,CAAO,YAAY,CAAI,CAAA,OAAA,EAAS,CACzC,mBAEkC,CAAwC,CAAA,CACxE,OAAW,IAAA,GAAA,CAAe,MAAO,CAAA,OAAA,CAAW,CAAG,CAAC,CAClD,CAGE,SAAA,UAAA,CAAA,CAAA,CACA,EACmB,CACnB,QAAY,EAAC,CACb,cAAO,IAAK,CAAA,CAAG,EAAE,OAAQ,CAAC,GAAQ,CAChC,CAAA,CAAI,CAAO,CAAA,CAAA,CAAA,CAAG,EAAI,CAAI,CAAA,EACxB,CAAC,CACM,CAAA,CACT,CAKa,MAAA,OAAA,CAAU,CAAiE,EAAA,0BAIzD,CAAc,CAAA,CAC3C,OAAY,CAAA,CAAA,IAAA,GAAO,OAAQ,CAAA,KAAA,CAAO,CAAC,EAAM,EAAE,WAAY,EAAC,CAC1D,CAEO,SAAA,UAAA,CAAoB,EAAa,CACtC,SACG,KAAM,CAAA,WAAW,EACjB,GAAI,CAAC,GAAM,cAAe,CAAA,CAAC,CAAC,CAC5B,CAAA,IAAA,CAAK,WAAW,CACrB,CAI2B,SAAA,UAAA,CAAA,CAAA,CAAa,EAAsB,CAC5D,4BAAwB,CAAO,CAAA,EAAA,IAAA,CAAK,KAAS,EAAAf,kBAAA,CAAc,CAAG,CAAC,CACjE,CAE0B,SAAA,SAAA,CAAA,CAAA,CAAgB,CACxC,OAAOU,oBAAA,CAAgB,KAAK,GAAI,EAAC,GAAKV,kBAAc,CAAA,CAAM,CAC5D,CAGO,SAAA,oBAAA,EAAmC,CACxC,MAAM,CAAA,CAAUA,mBAAcO,iBAAY,CAAA,CAC1C,IACI,CAAA,CAAA,CAAA,CACA,EAqBJ,OAAO,CACL,QAdc,CAAC,EAAc,CACzB,GAAgB,CAClB,GAAA,YAAA,CAAa,CAAY,CACzB,CAAA,CAAA,CAAa,CAAU,CAE3B,EAAA,CAAA,CAUE,OATa,CAAC,EAA0B,CACxC,CAAI,EAAgB,IACL,YAAA,CAAA,CAAY,EACzB,CAAY,CAAA,CAAK,CAErB,EAAA,CAAA,CAKE,KAtBW,IACX,YAAe,CAAC,CAAA,CAAgB,IAAkB,CAChD,CAAA,CAAe,WAAW,CAAe,CAAA,CAAO,EAChD,CAAe,CAAA,CAAA,CACf,EAAc,EAChB,CAAC,CAkBH,CACF,CAIoC,SAAA,mBAAA,CAAA,CAAA,CAAsB,EAAgC,CACxF,GAAI,OAAiB,CAAA,EAAA,QAAA,EAAY,EAAM,UAAW,CAAA,CAAA,EAAG,IAAO,CAAG,CAAA,SAC/D,GAAI,CAAA,CAAK,aAAkB,GAAA,OAAA,CAAS,CAClC,GAAI,OAAiB,CAAA,EAAA,QAAA,CACnB,MAAU,IAAA,KAAA,CAAM,uDAAuD,CACzE,CAAA,OAAO,SAAS,CAClB,CAAA,CAAA,CAAA,KAAA,GAAW,EAAK,WAAY,EAAA,GAAM,KAAM,CACtC,GAAI,OAAiB,CAAA,EAAA,QAAA,CACnB,MAAU,IAAA,KAAA,CAAM,oDAAoD,CAAA,CACtE,OAAO,CAAM,GAAA,EAAA,CAAA,CAAA,CACf,CACA,MAAM,UAAU,CAAgC,6BAAA,EAAA,CAAA,CAAA,CAAM,CACxD,CAEO,SAAA,iBAAA,CAA2B,EAAuB,CACvD,2BAA2B,OAAS,CAAA,CAAK,CAC3C,CAEO,SAAA,cAAA,CAAwB,CAAoB,CAAA,CACjD,OAA2B,mBAAA,CAAA,IAAA,CAAM,CAAE,CACrC,6BAEmC,CAAgB,CAAA,CACjD,KAAM,CAAC,CAAA,CAAM,GAAS,CAAO,CAAA,KAAA,CAAM,GAAG,CAChC,CAAA,CAAA,CAA0C,CAAE,EAAI,CAAA,KAAA,CAAA,CAAW,KAAO,CAAA,KAAA,CAAU,EAClF,GAAI,CAAA,GAAS,SAAW,OAAO,CAAA,EAAU,SACvC,CAAO,CAAA,KAAA,CAAQ,UACN,CAAS,GAAA,IAAA,EAAQ,OAAO,SAAU,CAAA,MAAA,CAAO,CAAK,CAAC,CAAA,CACxD,EAAO,EAAK,CAAA,MAAA,CAAO,CAAK,CAExB,CAAA,KAAA,UAAgB,KAAA,CAAA,CAAA,wDAAA,EAA2D,KAAQ,CAAO,CAAA,CAAA,CAAA,CAG5F,OACF,CAAA,sBAI4B,CAA0B,CAAA,CAAA,CAAkC,CACtF,OAAO,CAAA,EAAG,IAAQ,CAAK,CAAA,CAAA,CAAA,EAAI,IAAO,EACpC,CAAA,CAAA;;ACtSa,MAAA,wBAAA,CAA2B,UAEjC,SAAA,oBAAA,CACL,EAC8B,CAC9B,OAAO,CAAM,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,KAAA,GAAS,CAAE,QAAA,CAAU,wBAAyB,CAC7D,CAEoC,SAAA,mBAAA,CAAA,CAAA,CAAkB,CACpD,MAAgB,CAAA,CAAAU,sBAAA,CAAc,CAC9B,CAAA,CAAA,GAAI,OAAmB,CAAA,EAAA,WAAA,CACrB,MAAM,IAAU,KAAA,CAAA,CAAA,8BAAA,EAAiC,CAAU,CAAA,CAAA,CAAA,CAE7D,OACF,CAAA;;ACjBA,IAAA,CAAA,CAAA,MAAA,CAAA,cAAA,CAAA,IAAA,CAAA,CAAA,MAAA,CAAA,qBAAA,CAAA,IAAA,CAAA,CAAA,MAAA,CAAA,SAAA,CAAA,cAAA,CAAA,CAAA,CAAA,MAAA,CAAA,SAAA,CAAA,oiC,CAAa,CAAA,CAAA,CAAY,IAAmC,CAC3F,QAAmB,EAAC,CACd,CAAS,CAAA,OAAA,CAAU,EACzB,OAAO,MAAA,CAAA,IAAA,CAAK,CAAM,CAAE,CAAA,OAAA,CAAQ,CAAS,EAAA,CACnC,GAAI,CAAA,CAAI,WAAW,CAAM,CAAA,CAAG,CAC1B,MAAM,CAAA,CAAO,EAAI,OAAQ,CAAA,CAAA,CAAQ,EAAE,CAAA,CAC7B,EAAQ,CAAO,CAAA,CAAA,CAAA,CACrB,EAAM,CAAQ,CAAA,CAAA,EAChB,CACF,CAAC,CAAA,CACM,CACT,mBAEyB,CAAwC,CAAA,CAC/D,MAA0B,CAAA,CAAA,CAAA,CAAI,QAAQ,GAAG,CAAA,CACnC,CAA8B,CAAA,CAAA,CAAI,QAAQ,GAAG,CAAA,GAAM,GAAK,CAAI,CAAA,OAAA,CAAQ,GAAG,CAAI,CAAA,KAAA,CAAA,CAC3E,CAAmB,CAAA,CAAA,CAAI,UAAU,CAAG,CAAA,CAAS,EAE7C,CAAiB,CADF,EAAI,SAAU,CAAA,CAAA,CAAY,CAAG,CAAA,CAAO,EAC7B,KAAM,CAAA,GAAG,EAC/B,CAAsB,CAAA,UAAmB,WAAc,CAAA,CAAA,CAAI,SAAU,CAAA,CAAO,EAAI,EAChF,CAAA,CAAA,CAAcC,aAAG,KAAM,CAAA,CAAW,EAQxC,OAPe,CACb,QACA,CAAA,CAAA,CAAA,KAAA,CAAO,EAAe,CACtB,CAAA,CAAA,OAAA,CAAS,SAAS,CAAe,CAAA,CAAA,CAAA,CAAI,EAAE,CACvC,CAAA,MAAA,CAAQ,CAAY,CAAA,MAAA,CACpB,MAAO,gBAAiB,CAAA,CAAW,CACrC,CAEF,4BAEkC,CAAqC,CAAA,CAAA,CAAY,GAAK,CAAA,CACtF,MAAe,CAAA,CAAA,OAAA,CACT,EAAc,EAAC,CACrB,cAAO,IAAK,CAAA,CAAK,CAAE,CAAA,OAAA,CAAQ,CAAS,EAAA,CAClC,MAAU,CAAA,CAAA,CAAA,CAAS,EAAY,CAC/B,CAAI,CAAM,CAAA,CAAA,CAAA,KACD,CAAK,CAAA,CAAA,CAAA,CAAM,IAEtB,CAAC,CAAA,CACM,CACT,CAEO,SAAA,SAAA,CAAmB,CAA2C,CAAA,CACnE,OACE,CAAG,EAAA,CAAA,CAAO,YAAY,CAAO,CAAA,KAAA,CAAA,CAAA,EAAS,EAAO,OAC7C,CAAA,CAAA,CAAA,CAAAA,YAAA,CAAG,SAAU,CAAA,CAAA,CAAA,CACX,OAAQ,CAAO,CAAA,MAAA,CAAA,CACZ,kBAAkB,CAAO,CAAA,KAAK,EAClC,CAEL;;ACtDkC,SAAA,iBAAA,CAAA,CAAA,CAA8C,CAC9E,MAAM,CAAA,CAAmB,EACzB,CAAA,OAAA,CAAA,CAAS,QAAQ,CAAC,EAAY,CAC5B,KAAM,CAAC,EAAO,CAAW,CAAA,CAAA,CAAA,CAAQ,MAAM,GAAG,CAAA,CAC1C,EAAO,IAAK,CAAA,CAAA,EAAG,KAAS,CAAS,CAAA,CAAA,EACnC,CAAC,CAEM,CAAA,CACT,CAEoC,SAAA,mBAAA,CAAA,CAAA,CAAqC,CACvE,MAAM,CAAA,CAAmB,EACzB,CAAA,OAAA,MAAA,CAAO,OAAO,CAAU,CAAA,CAAE,QAAQ,CAAC,EAAc,CAC/C,CAAA,CAAO,IAAK,CAAA,GAAG,kBAAkB,CAAU,CAAA,QAAQ,CAAC,CAChD,CAAA,CAAA,CAAU,WACZ,CAAU,CAAA,SAAA,CAAU,QAAQ,CAAC,EAAc,CACzC,CAAO,CAAA,IAAA,CAAK,GAAG,iBAAkB,CAAA,CAAA,CAAU,QAAQ,CAAC,EACtD,CAAC,EAEL,CAAC,EAEM,CACT,yCAGE,CACA,CAAA,CAAA,CACA,CACA,MAAM,CAAA,CAA6C,EACnD,CAAA,OAAA,MAAA,CAAO,OAAO,CAAU,CAAA,CAAE,QAAQ,CAAC,EAAc,CAChC,iBAAkB,CAAA,CAAA,CAAU,QAAQ,CAAA,CACxC,SAAS,CAAO,CAAA,EAAG,EAAQ,IAAK,CAAA,GAAG,EAAU,OAAO,CAAA,CAC3D,EAAU,SACZ,EAAA,CAAA,CAAU,UAAU,OAAQ,CAAC,GAAc,CAErC,iBADsC,CAAA,CAAA,CAAU,QAAQ,CACxC,CAAA,QAAA,CAAS,CAAO,CAAG,EAAA,CAAA,CAAQ,KAAK,GAAG,CAAA,CAAU,OAAO,EAC1E,CAAC,EAEL,CAAC,CAAA,CAEM,CACT,CAEO,SAAA,6BAAA,CACL,EACA,CACA,CAAA,CACA,MAAiD,CAAA,CAAA,EACjD,CAAA,OAAA,MAAA,CAAO,MAAO,CAAA,CAAU,EAAE,OAAQ,CAAC,GAAc,CAE3C,iBAD6B,CAAA,CAAA,CAAU,QAAQ,CACxC,CAAA,QAAA,CAAS,CAAO,CAAG,EAAA,CAAA,CAAO,KAAK,GAAG,CAAA,CAAU,MAAM,CACzD,CAAA,CAAA,CAAU,WACZ,CAAU,CAAA,SAAA,CAAU,QAAQ,CAAC,EAAc,CACjB,kBAAkB,CAAU,CAAA,QAAQ,EACxC,QAAS,CAAA,CAAO,GAAG,CAAO,CAAA,IAAA,CAAK,GAAG,CAAU,CAAA,MAAM,EACxE,CAAC,EAEL,CAAC,CAAA,CAEM,CACT;;ACrDA,MAAM,CAAA,CAAa,CAEjB,cAAA,CAAgB,CACd,OAAA,CAAS,iBACT,CAAA,IAAA,CAAM,IACR,CAAA,CACA,aAAe,CAAA,CACb,OAAS,CAAA,gBAAA,CACT,IAAM,CAAA,IACR,CACA,CAAA,sBAAA,CAAwB,CACtB,OAAA,CAAS,yBACT,CAAA,IAAA,CAAM,IACR,CAAA,CACA,sBAAwB,CAAA,CACtB,OAAS,CAAA,yBAAA,CACT,IAAM,CAAA,IACR,CACA,CAAA,8BAAA,CAAgC,CAC9B,OAAA,CAAS,iCACT,CAAA,IAAA,CAAM,IACR,CAAA,CAEA,mBAAqB,CAAA,CACnB,OAAS,CAAA,sBAAA,CACT,IAAM,CAAA,IACR,CACA,CAAA,kBAAA,CAAoB,CAClB,OAAA,CAAS,qBACT,CAAA,IAAA,CAAM,IACR,CAAA,CACA,2BAA6B,CAAA,CAC3B,OAAS,CAAA,8BAAA,CACT,IAAM,CAAA,IACR,CACA,CAAA,2BAAA,CAA6B,CAC3B,OAAA,CAAS,+BACT,IAAM,CAAA,IACR,CAEA,CAAA,aAAA,CAAe,CACb,OAAA,CAAS,gBACT,CAAA,IAAA,CAAM,GACR,CAAA,CACA,oBAAsB,CAAA,CACpB,OAAS,CAAA,uBAAA,CACT,IAAM,CAAA,IACR,CACA,CAAA,qBAAA,CAAuB,CACrB,OAAA,CAAS,wBACT,CAAA,IAAA,CAAM,IACR,CAAA,CACA,oBAAsB,CAAA,CACpB,OAAS,CAAA,uBAAA,CACT,IAAM,CAAA,IACR,CACA,CAAA,kBAAA,CAAoB,CAClB,OAAA,CAAS,qBACT,CAAA,IAAA,CAAM,IACR,CAAA,CACA,mBAAqB,CAAA,CACnB,OAAS,CAAA,sBAAA,CACT,IAAM,CAAA,IACR,CACA,CAAA,kBAAA,CAAoB,CAClB,OAAA,CAAS,qBACT,CAAA,IAAA,CAAM,IACR,CAAA,CACA,oBAAsB,CAAA,CACpB,OAAS,CAAA,uBAAA,CACT,IAAM,CAAA,IACR,CACA,CAAA,yBAAA,CAA2B,CACzB,OAAA,CAAS,6BACT,IAAM,CAAA,IACR,CAEA,CAAA,iBAAA,CAAmB,CACjB,OAAA,CAAS,oBACT,CAAA,IAAA,CAAM,GACR,CAAA,CAEA,yBAA2B,CAAA,CACzB,OAAS,CAAA,4BAAA,CACT,IAAM,CAAA,GACR,CACF,CAAA,CAEM,CAAkB,CAAA,CACtB,eAAiB,CAAA,CACf,OAAS,CAAA,kBAAA,CACT,IAAM,CAAA,CACR,CACA,CAAA,eAAA,CAAiB,CACf,OAAA,CAAS,kBACT,CAAA,IAAA,CAAM,CACR,CAAA,CACA,qBAAuB,CAAA,CACrB,OAAS,CAAA,wBAAA,CACT,IAAM,CAAA,CACR,CACA,CAAA,YAAA,CAAc,CACZ,OAAA,CAAS,eACT,CAAA,IAAA,CAAM,CACR,CAAA,CACA,kBAAoB,CAAA,CAClB,OAAS,CAAA,qBAAA,CACT,IAAM,CAAA,CACR,CACA,CAAA,OAAA,CAAS,CACP,OAAA,CAAS,UACT,CAAA,IAAA,CAAM,CACR,CAAA,CACA,YAAc,CAAA,CACZ,OAAS,CAAA,eAAA,CACT,IAAM,CAAA,CACR,CACA,CAAA,gBAAA,CAAkB,CAChB,OAAA,CAAS,mBACT,CAAA,IAAA,CAAM,CACR,CAAA,CACA,yBAA2B,CAAA,CACzB,OAAS,CAAA,4BAAA,CACT,IAAM,CAAA,CACR,CACF,CAAA,CAKiC,SAAA,gBAAA,CAAA,CAAA,CAAuB,CAA2B,CAAA,CACjF,KAAM,CAAE,OAAS,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAS,CAAgB,CAAA,CAAA,CAAA,CAC1C,OAAO,CACL,OAAS,CAAA,CAAA,CAAU,CAAG,EAAA,CAAA,CAAA,CAAA,EAAW,CAAY,CAAA,CAAA,CAAA,CAAA,CAC7C,IACF,CAAA,CAAA,CACF,CAEO,SAAA,WAAA,CAAqB,CAAkB,CAAA,CAAA,CAA2B,CACvE,KAAM,CAAE,OAAA,CAAA,CAAA,CAAS,IAAS,CAAA,CAAA,CAAA,CAAA,CAAA,CAAW,CACrC,CAAA,CAAA,OAAO,CACL,OAAA,CAAS,CAAU,CAAA,CAAA,EAAG,CAAW,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAY,CAC7C,CAAA,IAAA,CAAA,CACF,CACF;;AC1I6B,SAAA,YAAA,CAAA,CAAA,CAAU,EAAwC,CAC7E,OAAU,KAAA,CAAA,OAAA,CAAQ,CAAG,CAAA,CACf,OAAO,CAAA,EAAkB,aAAe,CAAI,CAAA,MAAA,CACvC,CAAI,CAAA,KAAA,CAAM,CAAa,CAAA,CAEvB,CAGJ,CAAA,CAAA,CAAA,CACT,CAE8B,SAAA,aAAA,CAAA,CAAA,CAAU,CACtC,OAAc,MAAA,CAAA,cAAA,CAAe,CAAG,CAAA,GAAM,OAAO,SAAa,EAAA,MAAA,CAAO,IAAK,CAAA,CAAG,CAAE,CAAA,MAC7E,CAEO,SAAA,WAAA,CAAqB,EAAgC,CAC1D,OAAc,OAAA,CAAA,EAAU,WAC1B,CAE8B,SAAA,aAAA,CAAA,CAAA,CAAY,EAAoC,CAC5E,OAAgB,CAAA,EAAA,WAAA,CAAY,CAAK,CAAA,CAAU,CAEpC,CAAA,CAAA,UAAiB,QAAY,EAAA,OAAA,CAAQ,CAAM,CAAA,IAAA,GAAO,MAAM,CACjE,CAEO,SAAA,aAAA,CAAuB,EAAY,CAAmB,CAAA,CAC3D,OAAI,CAAA,EAAY,WAAY,CAAA,CAAK,CAAU,CAAA,CAAA,CAAA,CAEpC,OAAiB,CAAA,EAAA,QAAA,EAAY,CAAC,KAAA,CAAM,CAAK,CAClD,CAIO,SAAA,mBAAA,CAA6B,EAA8B,CAAgC,CAAA,CAChG,KAAM,CAAE,kBAAuB,CAAA,CAAA,CAAA,CAAA,CAAA,CACzB,CAAc,CAAA,MAAA,CAAO,KAAK,CAAQ,CAAA,UAAU,CAC5C,CAAA,CAAA,CAAa,MAAO,CAAA,IAAA,CAAK,CAAkB,CAAA,CACjD,IAAiB,CAAA,CAAA,CAAA,CAAA,CAEjB,OAAKC,UAAA,CAAW,CAAY,CAAA,CAAW,CAEvC,EAAA,CAAA,CAAY,QAAQ,CAAC,EAAQ,CAC3B,KAAM,CAAE,QAAA,CAAA,CAAA,CAAU,OAAS,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAQ,aAAc,CAAQ,CAAA,UAAA,CAAW,CAC9D,CAAA,CAAA,CAAA,CAASZ,iBAAkB,CAAA,CAAQ,CACnC,CAAA,CAAA,CAAoB,EAAmB,CAE7C,CAAA,CACE,CAAC,CAAAY,UAAA,CAAW,EAAkB,MAAQ,CAAA,CAAM,CAC5C,EAAA,CAACA,WAAW,CAAkB,CAAA,OAAA,CAAS,CAAO,CAAA,EAC9C,CAACA,UAAA,CAAW,CAAkB,CAAA,MAAA,CAAQ,CAAM,CAE5C,IAAA,CAAA,CAAa,CAGX,CAAA,CAAA,CAAA,CAAA,EAAc,CAChB,EAAA,CAAA,CAAU,OAAQ,CAAC,GAAuB,CAtEhD,IAAA,CAAA,CAuEQ,KAAM,CAAE,QAAU,CAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CAAS,MAAW,CAAA,CAAA,CAAA,CAAA,CAAA,CAChC,EAASZ,iBAAkB,CAAA,CAAQ,CAOzC,CAAK,CANW,CAAA,CAAA,CAAA,CAAA,CAAkB,SAAlB,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAA6B,KAC3C,CAAC,EACCY,UAAW,CAAA,CAAA,CAAI,MAAQ,CAAA,CAAM,CAC7B,EAAAA,UAAA,CAAW,EAAI,OAAS,CAAA,CAAO,CAC/B,EAAAA,UAAA,CAAW,CAAI,CAAA,MAAA,CAAQ,CAAM,CAAA,CAAA,MAEN,CAC7B,CAAA,EAAA,CAAC,EAEL,CAAC,CAEM,CAAA,CAAA,EA9B0C,CA+BnD,CAAA,yBAE+B,CAAY,CAAA,CACzC,OAAI,aAAA,CAAc,EAAO,CAAK,CAAA,CAAA,EAAK,CAAM,CAAA,QAAA,CAAS,GAAG,CAE5C,CADO,CAAM,CAAA,KAAA,CAAM,GAAG,CAAA,CAChB,MAAW,GAAA,CAAA,CAEnB,EACT,CAEO,SAAA,gBAAA,CAA0B,CAAY,CAAA,CAC3C,GAAI,aAAA,CAAc,CAAO,CAAA,CAAA,CAAK,GAAK,CAAM,CAAA,QAAA,CAAS,GAAG,CAAA,CAAG,CACtD,MAAc,CAAA,CAAA,CAAA,CAAM,MAAM,GAAG,CAAA,CAC7B,GAAI,CAAA,CAAM,SAAW,CAAG,CAAA,CACtB,MAAM,CAAA,CAAU,EAAM,CAAK,CAAA,CAAA,GAAA,CAAM,CAAM,CAAA,CAAA,CAAA,CACvC,OAAO,CAAC,CAAC,CAAA,CAAM,IAAM,cAAe,CAAA,CAAO,CAC7C,CACF,CACA,OAAO,CACT,CAAA,qBAE2B,CAAY,CAAA,CACrC,GAAI,aAAA,CAAc,CAAO,CAAA,CAAA,CAAK,CAC5B,CAAA,GAAI,CAEF,OAAO,OADS,IAAA,GAAA,CAAI,CAAK,CACH,EAAA,WACxB,CAAS,MAAA,CAAA,CAAP,CACA,OAAO,CAAA,CACT,CAEF,OAAO,CACT,CAAA,CAEiC,SAAA,gBAAA,CAAA,CAAA,CAA2C,CAtH5E,IAuHE,CAAA,CAAA,OAAO,CAAO,CAAA,CAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,QAAA,GAAP,IAAiB,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,SAC1B,CAEO,SAAA,eAAA,CAAyB,EAA0C,CACxE,OAAc,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,KAChB,CAEO,SAAA,iBAAA,CAA2B,CAAY,CAAA,CAAA,CAAgB,CAC5D,IAAI,CAAA,CAAqB,IACzB,CAAA,OAAmB,aAAA,CAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAO,SAAW,CAAA,CAAA,CAAK,IAChC,CAAA,CAAAP,gBAAA,CACN,oBACA,CAAA,CAAA,EAAG,CACL,CAAA,yCAAA,CAAA,CAAA,CAAA,CAGK,CACT,2BAEiC,CAAgB,CAAA,CAAA,CAAgB,CAC/D,IAAyB,CAAA,CAAA,IAAA,CACzB,OAAK,WAAA,CAAY,iBAAW,SAAS,CAAA,EAC/B,CAAC,CAAA,YAAA,CAAa,CAAU,CAAA,SAAS,CAAK,EAAA,CAAC,EAAU,SAAU,CAAA,MAAA,IACrD,CAAA,CAAAA,gBAAA,CACN,qBACA,CAAG,EAAA,CAAA,CAAA,uDAAA,CACL,CAIG,CAAA,CAAA,CACT,CAEgD,SAAA,+BAAA,CAAA,CAAA,CAA6B,CAC3E,IAAY,CAAA,CAAA,CAAA,CAAA,CACZ,OAAI,YAAA,CAAa,CAAK,CAChB,CAAA,CAAA,CAAM,MACR,GAAA,CAAA,CAAQ,CAAM,CAAA,KAAA,CAAM,CAAC,EAAc,cAAc,CAAM,CAAA,CAAA,CAAK,CAAC,CAAA,CAAA,CAG/D,CAAQ,CAAA,CAAA,CAAA,CAGH,CACT,wBAE8B,CAAa,CAAA,CAAA,CAAa,CAAiB,CAAA,CACvE,IAAI,CAAA,CAAqB,IACzB,CAAA,oBAAiB,CAAM,CAAA,CACrB,CAAO,CAAA,OAAA,CAAQ,CAAC,EAAe,CACzB,GACA,CAAC,CAAA,cAAA,CAAe,CAAK,CAAA,EAAK,CAAC,CAAA,CAAM,QAAS,CAAA,CAAG,KACvC,CAAA,CAAAX,WAAA,CACN,oBACA,CAAA,CAAA,EAAG,CAAkB,CAAA,QAAA,EAAA,CAAA,CAAA,6DAAA,CACvB,CAEJ,EAAA,CAAC,EAED,CAAQ,CAAAA,WAAA,CACN,oBACA,CAAA,CAAA,EAAG,aAAmB,CACxB,CAAA,uEAAA,CAAA,CAAA,CAGK,CACT,iCAEuC,CAAiB,CAAA,CAAA,CAAgB,CACtE,IAAyB,CAAA,CAAA,IAAA,CACzB,OAAO,MAAA,CAAA,OAAA,CAAQ,CAAU,CAAE,CAAA,OAAA,CAAQ,CAAC,CAAC,CAAK,CAAA,CAAA,CAAA,GAA8B,CACtE,GAAI,EAAO,OACX,MAAyB,CAAA,CAAA,aAAA,CAAc,CAAK,CAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAW,MAAQ,CAAA,CAAA,EAAG,qBAA0B,CACtF,CAAA,CAAA,CAAsB,gBAAiB,CAAA,CAAA,CAAW,CAAM,CAAA,CAC9D,CAAI,CACF,EAAQ,CACH,CAAI,CACT,CAAA,CAAA,CAAQ,CACC,CAAA,CAAA,CAAU,SACnB,EAAA,CAAA,CAAU,UAAU,OAAQ,CAAC,CAAmB,EAAA,CAC9C,GAAI,CAAA,CAAO,OACX,QAAyB,aAAc,CAAA,CAAA,CAAK,CAAU,CAAA,MAAA,CAAQ,CAAG,EAAA,CAAA,CAAA,UAAA,CAAkB,CACnF,CAAI,IACM,CAAA,CAAA,CAAA,EAEZ,CAAC,EAEL,CAAC,CAEM,CAAA,CACT,CAEO,SAAA,eAAA,CAAyB,EAAe,CAAiB,CAAA,CAC9D,IAAI,CAAA,CAAqB,IACzB,CAAA,OAAiB,YAAA,CAAA,CAAQ,EACvB,CAAS,CAAA,OAAA,CAAQ,CAAC,EAAiB,CAC7B,CACC,EAAA,gBAAA,CAAiB,CAAO,CAC3B,GAAA,CAAA,CAAQA,WACN,CAAA,sBAAA,CACA,CAAG,EAAA,CAAA,CAAA,UAAA,EAAoB,CACzB,CAAA,qEAAA,CAAA,CAAA,EAEJ,CAAC,CAED,CAAA,CAAA,CAAQA,WACN,CAAA,sBAAA,CACA,GAAG,CACL,CAAA,yFAAA,CAAA,CAAA,CAGK,CACT,mCAEyC,CAAY,CAAA,CAAA,CAAgB,CACnE,IAAyB,CAAA,CAAA,IAAA,CACzB,OAAO,MAAA,CAAA,MAAA,CAAO,CAAK,CAAE,CAAA,OAAA,CAAQ,CAAC,EAAmB,CAC/C,GAAI,CAAO,CAAA,OACX,MAA2B,CAAA,CAAA,eAAA,CAAgB,CAAW,EAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,QAAA,CAAU,CAAG,EAAA,CAAA,CAAA,UAAA,CAAkB,CAC/E,CAAA,CAAA,CAAsB,iBAAiB,CAAW,CAAA,CAAM,CAC9D,CAAI,EACF,CAAQ,CAAA,CAAA,CACH,CAAI,CACT,EAAQ,CACC,CAAA,CAAA,CAAU,SACnB,EAAA,CAAA,CAAU,SAAU,CAAA,OAAA,CAAQ,CAAC,EAAmB,CAC9C,GAAI,CAAA,CAAO,OACX,MAA2B,CAAA,CAAA,eAAA,CAAgB,CAAU,CAAA,QAAA,CAAU,GAAG,CAAkB,CAAA,UAAA,CAAA,CAAA,CACpF,CAAI,GACM,CAAA,CAAA,CAAA,EAEZ,CAAC,EAEL,CAAC,CAEM,CAAA,CACT,CAEO,SAAA,cAAA,CAAwB,CAAgB,CAAA,CAAA,CAAiB,CAC9D,MAAyB,IACzB,CAAA,OAAqC,+BAAA,CAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAW,OAAO,CAAA,CAK3C,+BAAgC,CAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAW,MAAM,CAC3D,GAAA,CAAA,CAAQA,WACN,CAAA,oBAAA,CACA,CAAG,EAAA,CAAA,CAAA,mEAAA,CACL,CARA,CAAA,CAAA,CAAA,CAAQA,YACN,qBACA,CAAA,CAAA,EAAG,CACL,CAAA,qEAAA,CAAA,CAAA,CAQK,CACT,CAEwC,SAAA,uBAAA,CAAA,CAAA,CAAY,EAAgB,CAClE,IAAyB,CAAA,CAAA,IAAA,CACzB,cAAO,MAAO,CAAA,CAAK,CAAE,CAAA,OAAA,CAAQ,CAAoB,EAAA,CAC/C,GAAI,CAAA,CAAO,OACX,MAA0B,CAAA,CAAA,cAAA,CAAe,EAAW,CAAG,EAAA,CAAA,CAAA,WAAA,CAAmB,CACpE,CAAA,CAAA,CAAsB,gBAAiB,CAAA,CAAA,CAAW,CAAM,CAAA,CAC9D,CACE,CAAA,CAAA,CAAQ,CACH,CAAI,CACT,CAAA,CAAA,CAAQ,CACC,CAAA,CAAA,CAAU,WACnB,CAAU,CAAA,SAAA,CAAU,OAAQ,CAAC,CAAmB,EAAA,CAC9C,GAAI,CAAA,CAAO,OACX,MAAM,CAAA,CAAoB,cAAe,CAAA,CAAA,CAAW,CAAG,EAAA,CAAA,CAAA,WAAA,CAAmB,CAC1E,CAAI,IACM,CAAA,CAAA,CAAA,EAEZ,CAAC,EAEL,CAAC,CAAA,CAEM,CACT,oCAE0C,CAAY,CAAA,CAAA,CAAgB,CACpE,IAAyB,CAAA,CAAA,IAAA,CACzB,GAAI,CAAA,EAAS,cAAc,CAAK,CAAA,CAAG,CACjC,QAA0B,uBAAwB,CAAA,CAAA,CAAO,CAAM,CAAA,CAC/D,CACE,GAAA,CAAA,CAAQ,CAEV,CAAA,CAAA,MAAyB,CAAA,CAAA,sBAAA,CAAuB,CAAO,CAAA,CAAM,EAC7D,CAAI,GACM,CAAA,CAAA,CAAA,EAEZ,CACE,KAAA,CAAA,CAAQW,gBACN,CAAA,oBAAA,CACA,GAAG,CACL,CAAA,kDAAA,CAAA,CAAA,CAGF,OAAO,CACT,CAEO,SAAA,iBAAA,CAA2B,CAAY,CAAA,CAAA,CAAgB,CAC5D,IAAI,CAAA,CAAqB,IACzB,CAAA,GAAI,CAAS,EAAA,aAAA,CAAc,CAAK,CAAA,CAAG,CACjC,MAAM,CAAA,CAAoB,uBAAwB,CAAA,CAAA,CAAO,CAAM,CAAA,CAC/D,CAAI,KACM,CAEV,CAAA,CAAA,MAA2B,CAAA,CAAA,wBAAA,CAAyB,CAAO,CAAA,CAAM,CACjE,CAAI,IACM,CAAA,CAAA,CAAA,EAEZ,CACE,KAAA,CAAA,CAAQA,gBACN,CAAA,oBAAA,CACA,CAAG,EAAA,CAAA,CAAA,0CAAA,CACL,EAGF,OAAO,CACT,CAEO,SAAA,YAAA,CAAsB,EAAmD,CAC9E,OAAqB,aAAA,CAAA,CAAA,CAAM,SAAU,CAAI,CAAA,CAC3C,CAEO,SAAA,aAAA,CACL,CACA,CAAA,CAAA,CACyC,CACzC,MAAY,CAEZ,CAAA,CAAA,OAAgB,CAAA,EAAA,CAAC,CAAO,CAAA,CAAA,CAAQ,CACvB,CAAA,CAAA,CAAA,EAAS,aAAa,CAAK,CAAA,EAAK,CAAM,CAAA,MAAA,EAC7C,CAAM,CAAA,OAAA,CAAQ,CAAC,EAAwC,CACrD,CAAQ,CAAA,YAAA,CAAa,CAAK,EAC5B,CAAC,CAGI,CAAA,CACT,CAEO,SAAA,SAAA,CAAmB,EAAY,CACpC,OAAc,OAAA,CAAA,EAAU,QAC1B,CAE8B,SAAA,aAAA,CAAA,CAAA,CAAY,CACxC,OAAO,OAAiB,CAAA,EAAA,WAAA,EAAe,OAAO,CAAA,GAAU,IAC1D,6BAEmC,CAAoC,CAAA,CAIrE,OAHI,EAAA,CAAC,CACD,EAAA,OAAiB,CAAA,EAAA,QAAA,EACjB,CAAC,CAAM,CAAA,IAAA,EAAQ,CAAC,aAAA,CAAc,EAAM,IAAM,CAAA,CAAA,CAAK,CAC/C,EAAA,CAAC,EAAM,OAAW,EAAA,CAAC,aAAc,CAAA,CAAA,CAAM,OAAS,CAAA,CAAA,CAAK,CAG3D,CAAA,yBAE+B,CAAc,CAAA,CAE3C,OADI,EAAA,WAAA,CAAY,CAAO,CAAA,EACnB,CAAC,aAAA,CAAc,EAAQ,MAAQ,CAAA,CAAA,CAAK,CAE1C,CAAA,CAEgC,SAAA,eAAA,CAAA,CAAA,CAAe,CAI7C,OAHI,cAAY,CAAQ,CAAA,EACpB,WAAY,CAAA,CAAA,CAAS,MAAM,CAAA,EAAK,WAAY,CAAA,CAAA,CAAS,KAAK,CAC1D,EAAA,CAAC,aAAc,CAAA,CAAA,CAAS,EAAI,CAAA,CAAA,CAAK,CACjC,EAAA,CAAC,cAAc,CAAS,CAAA,OAAA,CAAS,CAAK,CAAA,CAAA,CAE5C,CAEO,SAAA,YAAA,CAAsB,CAAY,CAAA,CAEvC,OADI,EAAY,WAAA,CAAA,CAAK,CACjB,EAAA,CAAC,aAAc,CAAA,CAAA,CAAM,IAAM,CAAA,CAAA,CAAK,EAEtC,CAEO,SAAA,wBAAA,CAAkC,CAAqC,CAAA,CAAA,CAAiB,CAG7F,OAFI,EAAA,CAAC,cAAe,CAAA,CAAO,GAEvB,CADWQ,mBAAoB,CAAA,CAAU,CACjC,CAAA,QAAA,CAAS,CAAO,CAAA,CAG9B,CAGE,SAAA,wBAAA,CAAA,CAAA,CACA,CACA,CAAA,CAAA,CACA,CACA,OAAmB,aAAA,CAAA,CAAA,CAAQ,EAAK,CAEzB,CADSd,8BAA+B,CAAA,CAAA,CAAY,CAAO,CAAA,CACnD,QAAS,CAAA,CAAM,EAFY,CAG5C,CAAA,CAGE,SAAA,sBAAA,CAAA,CAAA,CACA,EACA,CACA,CAAA,CACA,OAAK,aAAA,CAAc,EAAW,CAAK,CAAA,CAAA,CAE5Be,6BADQ,CAA8B,CAAY,CAAA,CAAO,CAClD,CAAA,QAAA,CAAS,CAAS,CAFa,CAAA,CAAA,CAG/C,CAEO,SAAA,sBAAA,CACL,CACA,CAAA,CAAA,CACA,CACA,CAAA,CACA,IAAyB,CAAA,CAAA,IAAA,CACzB,MAAM,CAAA,CAAwB,MAAO,CAAA,IAAA,CAAK,CAAkB,CAAA,CACtD,EAAgB,MAAO,CAAA,IAAA,CAAK,CAAU,CAAA,CAE5C,OAAgBF,UAAA,CAAA,CAAA,CAAuB,CAAa,CAAA,CAMlD,EAAsB,OAAQ,CAAC,CAAQ,EAAA,CAxb3C,IAybM,CAAA,CAAA,GAAI,CAAO,CAAA,OAEX,MAAgC,CAAA,CAAA,CAAA,CAAmB,CAAK,CAAA,CAAA,MAAA,CAClD,CAAkB,CAAAZ,iBAAA,CAAkB,CAAW,CAAA,CAAA,CAAA,CAAK,QAAQ,CAElE,CAAKY,UAAW,CAAA,CAAA,CAAyB,CAAe,CAAA,CAKjDA,UAAK,CAAW,EAAmB,CAAK,CAAA,CAAA,OAAA,CAAS,CAAW,CAAA,CAAA,CAAA,CAAK,OAAO,CAAA,CAKxEA,UAAK,CAAW,EAAmB,CAAK,CAAA,CAAA,MAAA,CAAQ,CAAW,CAAA,CAAA,CAAA,CAAK,MAAM,CAAA,CAKtE,CAAI,CAAmB,GAAK,SAAa,EAAA,CAAC,CAAW,CAAA,CAAA,CAAA,CAAK,SAC/D,CAAA,CAAA,CAAQP,gBACN,CAAA,2BAAA,CACA,GAAG,CAAiF,CAAA,uEAAA,EAAA,CAAA,CAAA,CACtF,CACS,CAAA,CAAA,CAAmB,CAAK,CAAA,CAAA,SAAA,EAAa,CAAW,CAAA,CAAA,CAAA,CAAK,YAC3C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAK,SAAxB,GAAA,IAAA,EAAA,CAAA,CAAmC,QAAQ,CAAC,CAAE,OAAS,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAQ,YAAa,CAndpF,IAAA,CAAA,CAodU,GAAI,CAAA,CAAO,OAUN,CATa,CAAA,CAAA,CAAA,CAAA,CAAW,GAAK,SAAhB,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAA2B,IAAK,CAAC,CAAc,EAAA,CAC/D,MAAM,CAAA,CAAYL,kBAAkB,CAAU,CAAA,QAAQ,CACtD,CAAA,OACaY,UAAA,CAAA,CAAA,CAAQ,CAAS,CAAA,EAC5BA,WAAW,CAAQ,CAAA,CAAA,CAAU,MAAM,CAAA,EACnCA,WAAW,CAAS,CAAA,CAAA,CAAU,OAAO,CAEzC,MAGU,CAAA,CAAAP,gBAAA,CACN,2BACA,CAAA,CAAA,EAAG,CAAiF,CAAA,uEAAA,EAAA,CAAA,CAAA,CACtF,CAEJ,EAAA,CAAA,CAAA,CAAA,CA3BA,EAAQA,gBACN,CAAA,2BAAA,CACA,CAAG,EAAA,CAAA,CAAA,+DAAA,EAAyE,CAC9E,CAAA,CAAA,CAAA,CARA,CAAQ,CAAAA,gBAAA,CACN,4BACA,CAAG,EAAA,CAAA,CAAA,iEAAA,EAA2E,CAChF,CAAA,CAAA,CAAA,CARA,CAAQ,CAAAA,gBAAA,CACN,2BACA,CAAA,CAAA,EAAG,qEAA2E,CAChF,CAAA,CAAA,EAoCJ,CAAC,CAAA,CAnDD,EAAQA,gBACN,CAAA,2BAAA,CACA,CAAG,EAAA,CAAA,CAAA,iDAAA,CACL,EAmDK,CACT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}